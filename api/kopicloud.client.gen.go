// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiADGroups request
	GetApiADGroups(ctx context.Context, params *GetApiADGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADGroupsAll request
	GetApiADGroupsAll(ctx context.Context, params *GetApiADGroupsAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADGroupsDistributionAll request
	GetApiADGroupsDistributionAll(ctx context.Context, params *GetApiADGroupsDistributionAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADGroupsSecurityAll request
	GetApiADGroupsSecurityAll(ctx context.Context, params *GetApiADGroupsSecurityAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADGroupsGroupName request
	GetApiADGroupsGroupName(ctx context.Context, groupName string, params *GetApiADGroupsGroupNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiADGroupsGroupNameDistribution request
	PostApiADGroupsGroupNameDistribution(ctx context.Context, groupName string, params *PostApiADGroupsGroupNameDistributionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADGroupsGroupNameExists request
	GetApiADGroupsGroupNameExists(ctx context.Context, groupName string, params *GetApiADGroupsGroupNameExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiADGroupsGroupNameRemove request
	DeleteApiADGroupsGroupNameRemove(ctx context.Context, groupName string, params *DeleteApiADGroupsGroupNameRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiADGroupsGroupNameRenameNewGroupName request
	PutApiADGroupsGroupNameRenameNewGroupName(ctx context.Context, groupName string, newGroupName string, params *PutApiADGroupsGroupNameRenameNewGroupNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiADGroupsGroupNameSecurity request
	PostApiADGroupsGroupNameSecurity(ctx context.Context, groupName string, params *PostApiADGroupsGroupNameSecurityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADUserListUsers request
	GetApiADUserListUsers(ctx context.Context, params *GetApiADUserListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADUserListUsersAll request
	GetApiADUserListUsersAll(ctx context.Context, params *GetApiADUserListUsersAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiADUserUsername request
	DeleteApiADUserUsername(ctx context.Context, username string, params *DeleteApiADUserUsernameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// APIUser request
	APIUser(ctx context.Context, username string, params *APIUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiADUserUsername request
	PutApiADUserUsername(ctx context.Context, username string, params *PutApiADUserUsernameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADUserUsernameDetails request
	GetApiADUserUsernameDetails(ctx context.Context, username string, params *GetApiADUserUsernameDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiADUserUsernameDisable request
	PutApiADUserUsernameDisable(ctx context.Context, username string, params *PutApiADUserUsernameDisableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiADUserUsernameEnable request
	PutApiADUserUsernameEnable(ctx context.Context, username string, params *PutApiADUserUsernameEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADUserUsernameExists request
	GetApiADUserUsernameExists(ctx context.Context, username string, params *GetApiADUserUsernameExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADUserUsernameGroupAll request
	GetApiADUserUsernameGroupAll(ctx context.Context, username string, params *GetApiADUserUsernameGroupAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiADUserUsernameGroupGroupName request
	DeleteApiADUserUsernameGroupGroupName(ctx context.Context, username string, groupName string, params *DeleteApiADUserUsernameGroupGroupNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADUserUsernameGroupGroupName request
	GetApiADUserUsernameGroupGroupName(ctx context.Context, username string, groupName string, params *GetApiADUserUsernameGroupGroupNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiADUserUsernameGroupGroupName request
	PostApiADUserUsernameGroupGroupName(ctx context.Context, username string, groupName string, params *PostApiADUserUsernameGroupGroupNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADUserUsernameGroupGroupNameExists request
	GetApiADUserUsernameGroupGroupNameExists(ctx context.Context, username string, groupName string, params *GetApiADUserUsernameGroupGroupNameExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADUserUsernameLastLogon request
	GetApiADUserUsernameLastLogon(ctx context.Context, username string, params *GetApiADUserUsernameLastLogonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiADUserUsernameRenameNewUsername request
	PutApiADUserUsernameRenameNewUsername(ctx context.Context, username string, newUsername string, params *PutApiADUserUsernameRenameNewUsernameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiADUserUsernameResetPassword request
	PutApiADUserUsernameResetPassword(ctx context.Context, username string, params *PutApiADUserUsernameResetPasswordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiADUserUsernameUnlock request
	PutApiADUserUsernameUnlock(ctx context.Context, username string, params *PutApiADUserUsernameUnlockParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiADUserGuid request
	DeleteApiADUserGuid(ctx context.Context, params *DeleteApiADUserGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiADUserGuid request
	GetApiADUserGuid(ctx context.Context, params *GetApiADUserGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiADUserGuid request
	PutApiADUserGuid(ctx context.Context, params *PutApiADUserGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiComputers request
	GetApiComputers(ctx context.Context, params *GetApiComputersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiComputersAll request
	GetApiComputersAll(ctx context.Context, params *GetApiComputersAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiComputersCleanUp request
	DeleteApiComputersCleanUp(ctx context.Context, params *DeleteApiComputersCleanUpParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiComputersRemove request
	DeleteApiComputersRemove(ctx context.Context, params *DeleteApiComputersRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiComputersADComputerName request
	GetApiComputersADComputerName(ctx context.Context, aDComputerName string, params *GetApiComputersADComputerNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiComputersADComputerNameExists request
	GetApiComputersADComputerNameExists(ctx context.Context, aDComputerName string, params *GetApiComputersADComputerNameExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiComputersADComputerNameRegister request
	PostApiComputersADComputerNameRegister(ctx context.Context, aDComputerName string, params *PostApiComputersADComputerNameRegisterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiComputersADComputerNameRemove request
	DeleteApiComputersADComputerNameRemove(ctx context.Context, aDComputerName string, params *DeleteApiComputersADComputerNameRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiComputersADComputerNameRenameNewADComputerName request
	PutApiComputersADComputerNameRenameNewADComputerName(ctx context.Context, aDComputerName string, newADComputerName string, params *PutApiComputersADComputerNameRenameNewADComputerNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiComputersADComputerNameUpdate request
	PutApiComputersADComputerNameUpdate(ctx context.Context, aDComputerName string, params *PutApiComputersADComputerNameUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiDnsAAAARecord request
	DeleteApiDnsAAAARecord(ctx context.Context, params *DeleteApiDnsAAAARecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsAAAARecord request
	GetApiDnsAAAARecord(ctx context.Context, params *GetApiDnsAAAARecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiDnsAAAARecord request
	PostApiDnsAAAARecord(ctx context.Context, params *PostApiDnsAAAARecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsAAAARecordAll request
	GetApiDnsAAAARecordAll(ctx context.Context, params *GetApiDnsAAAARecordAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsAAAARecordHostNameDNSHostName request
	GetApiDnsAAAARecordHostNameDNSHostName(ctx context.Context, dNSHostName string, params *GetApiDnsAAAARecordHostNameDNSHostNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsAAAARecordIPv6AddressIPv6Address request
	GetApiDnsAAAARecordIPv6AddressIPv6Address(ctx context.Context, iPv6Address string, params *GetApiDnsAAAARecordIPv6AddressIPv6AddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsAAAARecordZoneName request
	GetApiDnsAAAARecordZoneName(ctx context.Context, zoneName string, params *GetApiDnsAAAARecordZoneNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiDnsARecord request
	DeleteApiDnsARecord(ctx context.Context, params *DeleteApiDnsARecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsARecord request
	GetApiDnsARecord(ctx context.Context, params *GetApiDnsARecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiDnsARecord request
	PostApiDnsARecord(ctx context.Context, params *PostApiDnsARecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsARecordAll request
	GetApiDnsARecordAll(ctx context.Context, params *GetApiDnsARecordAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsARecordHostNameDNSHostName request
	GetApiDnsARecordHostNameDNSHostName(ctx context.Context, dNSHostName string, params *GetApiDnsARecordHostNameDNSHostNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsARecordIPAddressIPAddress request
	GetApiDnsARecordIPAddressIPAddress(ctx context.Context, iPAddress string, params *GetApiDnsARecordIPAddressIPAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsARecordZoneName request
	GetApiDnsARecordZoneName(ctx context.Context, zoneName string, params *GetApiDnsARecordZoneNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiDnsCNameRecord request
	DeleteApiDnsCNameRecord(ctx context.Context, params *DeleteApiDnsCNameRecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsCNameRecord request
	GetApiDnsCNameRecord(ctx context.Context, params *GetApiDnsCNameRecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiDnsCNameRecord request
	PostApiDnsCNameRecord(ctx context.Context, params *PostApiDnsCNameRecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsCNameRecordAll request
	GetApiDnsCNameRecordAll(ctx context.Context, params *GetApiDnsCNameRecordAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsCNameRecordHostNameDNSHostName request
	GetApiDnsCNameRecordHostNameDNSHostName(ctx context.Context, dNSHostName string, params *GetApiDnsCNameRecordHostNameDNSHostNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsCNameRecordHostNameAliasDNSHostNameAlias request
	GetApiDnsCNameRecordHostNameAliasDNSHostNameAlias(ctx context.Context, dNSHostNameAlias string, params *GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsCNameRecordZoneName request
	GetApiDnsCNameRecordZoneName(ctx context.Context, zoneName string, params *GetApiDnsCNameRecordZoneNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsLookupZoneAll request
	GetApiDnsLookupZoneAll(ctx context.Context, params *GetApiDnsLookupZoneAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiDnsLookupZoneZoneName request
	DeleteApiDnsLookupZoneZoneName(ctx context.Context, zoneName string, params *DeleteApiDnsLookupZoneZoneNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiDnsLookupZoneZoneName request
	PostApiDnsLookupZoneZoneName(ctx context.Context, zoneName string, params *PostApiDnsLookupZoneZoneNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsReverseLookupZoneAll request
	GetApiDnsReverseLookupZoneAll(ctx context.Context, params *GetApiDnsReverseLookupZoneAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiDnsReverseLookupZoneNetworkID request
	DeleteApiDnsReverseLookupZoneNetworkID(ctx context.Context, networkID string, params *DeleteApiDnsReverseLookupZoneNetworkIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsReverseLookupZoneNetworkID request
	GetApiDnsReverseLookupZoneNetworkID(ctx context.Context, networkID string, params *GetApiDnsReverseLookupZoneNetworkIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiDnsReverseLookupZoneNetworkID request
	PostApiDnsReverseLookupZoneNetworkID(ctx context.Context, networkID string, params *PostApiDnsReverseLookupZoneNetworkIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsZonesAll request
	GetApiDnsZonesAll(ctx context.Context, params *GetApiDnsZonesAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsZonesZoneName request
	GetApiDnsZonesZoneName(ctx context.Context, zoneName string, params *GetApiDnsZonesZoneNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsZonesZoneNameExists request
	GetApiDnsZonesZoneNameExists(ctx context.Context, zoneName string, params *GetApiDnsZonesZoneNameExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiLogin request
	PostApiLogin(ctx context.Context, params *PostApiLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiOU request
	PostApiOU(ctx context.Context, params *PostApiOUParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiOU request
	PutApiOU(ctx context.Context, params *PutApiOUParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiOUAll request
	GetApiOUAll(ctx context.Context, params *GetApiOUAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOUByGuid request
	GetOUByGuid(ctx context.Context, params *GetOUByGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiOUMove request
	PutApiOUMove(ctx context.Context, params *PutApiOUMoveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOUByPath request
	GetOUByPath(ctx context.Context, params *GetOUByPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiOUPathExists request
	GetApiOUPathExists(ctx context.Context, params *GetApiOUPathExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiOUPathRemove request
	DeleteApiOUPathRemove(ctx context.Context, params *DeleteApiOUPathRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiOURename request
	PutApiOURename(ctx context.Context, params *PutApiOURenameParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiADGroups(ctx context.Context, params *GetApiADGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADGroupsAll(ctx context.Context, params *GetApiADGroupsAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADGroupsAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADGroupsDistributionAll(ctx context.Context, params *GetApiADGroupsDistributionAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADGroupsDistributionAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADGroupsSecurityAll(ctx context.Context, params *GetApiADGroupsSecurityAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADGroupsSecurityAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADGroupsGroupName(ctx context.Context, groupName string, params *GetApiADGroupsGroupNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADGroupsGroupNameRequest(c.Server, groupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiADGroupsGroupNameDistribution(ctx context.Context, groupName string, params *PostApiADGroupsGroupNameDistributionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiADGroupsGroupNameDistributionRequest(c.Server, groupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADGroupsGroupNameExists(ctx context.Context, groupName string, params *GetApiADGroupsGroupNameExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADGroupsGroupNameExistsRequest(c.Server, groupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiADGroupsGroupNameRemove(ctx context.Context, groupName string, params *DeleteApiADGroupsGroupNameRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiADGroupsGroupNameRemoveRequest(c.Server, groupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiADGroupsGroupNameRenameNewGroupName(ctx context.Context, groupName string, newGroupName string, params *PutApiADGroupsGroupNameRenameNewGroupNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiADGroupsGroupNameRenameNewGroupNameRequest(c.Server, groupName, newGroupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiADGroupsGroupNameSecurity(ctx context.Context, groupName string, params *PostApiADGroupsGroupNameSecurityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiADGroupsGroupNameSecurityRequest(c.Server, groupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADUserListUsers(ctx context.Context, params *GetApiADUserListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADUserListUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADUserListUsersAll(ctx context.Context, params *GetApiADUserListUsersAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADUserListUsersAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiADUserUsername(ctx context.Context, username string, params *DeleteApiADUserUsernameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiADUserUsernameRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) APIUser(ctx context.Context, username string, params *APIUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAPIUserRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiADUserUsername(ctx context.Context, username string, params *PutApiADUserUsernameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiADUserUsernameRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADUserUsernameDetails(ctx context.Context, username string, params *GetApiADUserUsernameDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADUserUsernameDetailsRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiADUserUsernameDisable(ctx context.Context, username string, params *PutApiADUserUsernameDisableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiADUserUsernameDisableRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiADUserUsernameEnable(ctx context.Context, username string, params *PutApiADUserUsernameEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiADUserUsernameEnableRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADUserUsernameExists(ctx context.Context, username string, params *GetApiADUserUsernameExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADUserUsernameExistsRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADUserUsernameGroupAll(ctx context.Context, username string, params *GetApiADUserUsernameGroupAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADUserUsernameGroupAllRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiADUserUsernameGroupGroupName(ctx context.Context, username string, groupName string, params *DeleteApiADUserUsernameGroupGroupNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiADUserUsernameGroupGroupNameRequest(c.Server, username, groupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADUserUsernameGroupGroupName(ctx context.Context, username string, groupName string, params *GetApiADUserUsernameGroupGroupNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADUserUsernameGroupGroupNameRequest(c.Server, username, groupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiADUserUsernameGroupGroupName(ctx context.Context, username string, groupName string, params *PostApiADUserUsernameGroupGroupNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiADUserUsernameGroupGroupNameRequest(c.Server, username, groupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADUserUsernameGroupGroupNameExists(ctx context.Context, username string, groupName string, params *GetApiADUserUsernameGroupGroupNameExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADUserUsernameGroupGroupNameExistsRequest(c.Server, username, groupName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADUserUsernameLastLogon(ctx context.Context, username string, params *GetApiADUserUsernameLastLogonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADUserUsernameLastLogonRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiADUserUsernameRenameNewUsername(ctx context.Context, username string, newUsername string, params *PutApiADUserUsernameRenameNewUsernameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiADUserUsernameRenameNewUsernameRequest(c.Server, username, newUsername, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiADUserUsernameResetPassword(ctx context.Context, username string, params *PutApiADUserUsernameResetPasswordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiADUserUsernameResetPasswordRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiADUserUsernameUnlock(ctx context.Context, username string, params *PutApiADUserUsernameUnlockParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiADUserUsernameUnlockRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiADUserGuid(ctx context.Context, params *DeleteApiADUserGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiADUserGuidRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiADUserGuid(ctx context.Context, params *GetApiADUserGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiADUserGuidRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiADUserGuid(ctx context.Context, params *PutApiADUserGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiADUserGuidRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiComputers(ctx context.Context, params *GetApiComputersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiComputersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiComputersAll(ctx context.Context, params *GetApiComputersAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiComputersAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiComputersCleanUp(ctx context.Context, params *DeleteApiComputersCleanUpParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiComputersCleanUpRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiComputersRemove(ctx context.Context, params *DeleteApiComputersRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiComputersRemoveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiComputersADComputerName(ctx context.Context, aDComputerName string, params *GetApiComputersADComputerNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiComputersADComputerNameRequest(c.Server, aDComputerName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiComputersADComputerNameExists(ctx context.Context, aDComputerName string, params *GetApiComputersADComputerNameExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiComputersADComputerNameExistsRequest(c.Server, aDComputerName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiComputersADComputerNameRegister(ctx context.Context, aDComputerName string, params *PostApiComputersADComputerNameRegisterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiComputersADComputerNameRegisterRequest(c.Server, aDComputerName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiComputersADComputerNameRemove(ctx context.Context, aDComputerName string, params *DeleteApiComputersADComputerNameRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiComputersADComputerNameRemoveRequest(c.Server, aDComputerName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiComputersADComputerNameRenameNewADComputerName(ctx context.Context, aDComputerName string, newADComputerName string, params *PutApiComputersADComputerNameRenameNewADComputerNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiComputersADComputerNameRenameNewADComputerNameRequest(c.Server, aDComputerName, newADComputerName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiComputersADComputerNameUpdate(ctx context.Context, aDComputerName string, params *PutApiComputersADComputerNameUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiComputersADComputerNameUpdateRequest(c.Server, aDComputerName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiDnsAAAARecord(ctx context.Context, params *DeleteApiDnsAAAARecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiDnsAAAARecordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsAAAARecord(ctx context.Context, params *GetApiDnsAAAARecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsAAAARecordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDnsAAAARecord(ctx context.Context, params *PostApiDnsAAAARecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDnsAAAARecordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsAAAARecordAll(ctx context.Context, params *GetApiDnsAAAARecordAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsAAAARecordAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsAAAARecordHostNameDNSHostName(ctx context.Context, dNSHostName string, params *GetApiDnsAAAARecordHostNameDNSHostNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsAAAARecordHostNameDNSHostNameRequest(c.Server, dNSHostName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsAAAARecordIPv6AddressIPv6Address(ctx context.Context, iPv6Address string, params *GetApiDnsAAAARecordIPv6AddressIPv6AddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsAAAARecordIPv6AddressIPv6AddressRequest(c.Server, iPv6Address, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsAAAARecordZoneName(ctx context.Context, zoneName string, params *GetApiDnsAAAARecordZoneNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsAAAARecordZoneNameRequest(c.Server, zoneName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiDnsARecord(ctx context.Context, params *DeleteApiDnsARecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiDnsARecordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsARecord(ctx context.Context, params *GetApiDnsARecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsARecordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDnsARecord(ctx context.Context, params *PostApiDnsARecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDnsARecordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsARecordAll(ctx context.Context, params *GetApiDnsARecordAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsARecordAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsARecordHostNameDNSHostName(ctx context.Context, dNSHostName string, params *GetApiDnsARecordHostNameDNSHostNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsARecordHostNameDNSHostNameRequest(c.Server, dNSHostName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsARecordIPAddressIPAddress(ctx context.Context, iPAddress string, params *GetApiDnsARecordIPAddressIPAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsARecordIPAddressIPAddressRequest(c.Server, iPAddress, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsARecordZoneName(ctx context.Context, zoneName string, params *GetApiDnsARecordZoneNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsARecordZoneNameRequest(c.Server, zoneName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiDnsCNameRecord(ctx context.Context, params *DeleteApiDnsCNameRecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiDnsCNameRecordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsCNameRecord(ctx context.Context, params *GetApiDnsCNameRecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsCNameRecordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDnsCNameRecord(ctx context.Context, params *PostApiDnsCNameRecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDnsCNameRecordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsCNameRecordAll(ctx context.Context, params *GetApiDnsCNameRecordAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsCNameRecordAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsCNameRecordHostNameDNSHostName(ctx context.Context, dNSHostName string, params *GetApiDnsCNameRecordHostNameDNSHostNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsCNameRecordHostNameDNSHostNameRequest(c.Server, dNSHostName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsCNameRecordHostNameAliasDNSHostNameAlias(ctx context.Context, dNSHostNameAlias string, params *GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsCNameRecordHostNameAliasDNSHostNameAliasRequest(c.Server, dNSHostNameAlias, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsCNameRecordZoneName(ctx context.Context, zoneName string, params *GetApiDnsCNameRecordZoneNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsCNameRecordZoneNameRequest(c.Server, zoneName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsLookupZoneAll(ctx context.Context, params *GetApiDnsLookupZoneAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsLookupZoneAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiDnsLookupZoneZoneName(ctx context.Context, zoneName string, params *DeleteApiDnsLookupZoneZoneNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiDnsLookupZoneZoneNameRequest(c.Server, zoneName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDnsLookupZoneZoneName(ctx context.Context, zoneName string, params *PostApiDnsLookupZoneZoneNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDnsLookupZoneZoneNameRequest(c.Server, zoneName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsReverseLookupZoneAll(ctx context.Context, params *GetApiDnsReverseLookupZoneAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsReverseLookupZoneAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiDnsReverseLookupZoneNetworkID(ctx context.Context, networkID string, params *DeleteApiDnsReverseLookupZoneNetworkIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiDnsReverseLookupZoneNetworkIDRequest(c.Server, networkID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsReverseLookupZoneNetworkID(ctx context.Context, networkID string, params *GetApiDnsReverseLookupZoneNetworkIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsReverseLookupZoneNetworkIDRequest(c.Server, networkID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDnsReverseLookupZoneNetworkID(ctx context.Context, networkID string, params *PostApiDnsReverseLookupZoneNetworkIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDnsReverseLookupZoneNetworkIDRequest(c.Server, networkID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsZonesAll(ctx context.Context, params *GetApiDnsZonesAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsZonesAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsZonesZoneName(ctx context.Context, zoneName string, params *GetApiDnsZonesZoneNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsZonesZoneNameRequest(c.Server, zoneName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsZonesZoneNameExists(ctx context.Context, zoneName string, params *GetApiDnsZonesZoneNameExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsZonesZoneNameExistsRequest(c.Server, zoneName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiLogin(ctx context.Context, params *PostApiLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiLoginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiOU(ctx context.Context, params *PostApiOUParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiOURequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiOU(ctx context.Context, params *PutApiOUParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiOURequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiOUAll(ctx context.Context, params *GetApiOUAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiOUAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOUByGuid(ctx context.Context, params *GetOUByGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOUByGuidRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiOUMove(ctx context.Context, params *PutApiOUMoveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiOUMoveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOUByPath(ctx context.Context, params *GetOUByPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOUByPathRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiOUPathExists(ctx context.Context, params *GetApiOUPathExistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiOUPathExistsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiOUPathRemove(ctx context.Context, params *DeleteApiOUPathRemoveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiOUPathRemoveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiOURename(ctx context.Context, params *PutApiOURenameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiOURenameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiADGroupsRequest generates requests for GetApiADGroups
func NewGetApiADGroupsRequest(server string, params *GetApiADGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Recursive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Recursive", runtime.ParamLocationQuery, *params.Recursive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADGroupsAllRequest generates requests for GetApiADGroupsAll
func NewGetApiADGroupsAllRequest(server string, params *GetApiADGroupsAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADGroups/All")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADGroupsDistributionAllRequest generates requests for GetApiADGroupsDistributionAll
func NewGetApiADGroupsDistributionAllRequest(server string, params *GetApiADGroupsDistributionAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADGroups/Distribution/All")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Recursive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Recursive", runtime.ParamLocationQuery, *params.Recursive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADGroupsSecurityAllRequest generates requests for GetApiADGroupsSecurityAll
func NewGetApiADGroupsSecurityAllRequest(server string, params *GetApiADGroupsSecurityAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADGroups/Security/All")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Recursive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Recursive", runtime.ParamLocationQuery, *params.Recursive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADGroupsGroupNameRequest generates requests for GetApiADGroupsGroupName
func NewGetApiADGroupsGroupNameRequest(server string, groupName string, params *GetApiADGroupsGroupNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "GroupName", runtime.ParamLocationPath, groupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPostApiADGroupsGroupNameDistributionRequest generates requests for PostApiADGroupsGroupNameDistribution
func NewPostApiADGroupsGroupNameDistributionRequest(server string, groupName string, params *PostApiADGroupsGroupNameDistributionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "GroupName", runtime.ParamLocationPath, groupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADGroups/%s/Distribution", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.GroupScope != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "GroupScope", runtime.ParamLocationQuery, *params.GroupScope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GroupDescription != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "GroupDescription", runtime.ParamLocationQuery, *params.GroupDescription); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GroupEmail != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "GroupEmail", runtime.ParamLocationQuery, *params.GroupEmail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADGroupsGroupNameExistsRequest generates requests for GetApiADGroupsGroupNameExists
func NewGetApiADGroupsGroupNameExistsRequest(server string, groupName string, params *GetApiADGroupsGroupNameExistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "GroupName", runtime.ParamLocationPath, groupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADGroups/%s/Exists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewDeleteApiADGroupsGroupNameRemoveRequest generates requests for DeleteApiADGroupsGroupNameRemove
func NewDeleteApiADGroupsGroupNameRemoveRequest(server string, groupName string, params *DeleteApiADGroupsGroupNameRemoveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "GroupName", runtime.ParamLocationPath, groupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADGroups/%s/Remove", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPutApiADGroupsGroupNameRenameNewGroupNameRequest generates requests for PutApiADGroupsGroupNameRenameNewGroupName
func NewPutApiADGroupsGroupNameRenameNewGroupNameRequest(server string, groupName string, newGroupName string, params *PutApiADGroupsGroupNameRenameNewGroupNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "GroupName", runtime.ParamLocationPath, groupName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "NewGroupName", runtime.ParamLocationPath, newGroupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADGroups/%s/Rename/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPostApiADGroupsGroupNameSecurityRequest generates requests for PostApiADGroupsGroupNameSecurity
func NewPostApiADGroupsGroupNameSecurityRequest(server string, groupName string, params *PostApiADGroupsGroupNameSecurityParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "GroupName", runtime.ParamLocationPath, groupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADGroups/%s/Security", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.GroupScope != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "GroupScope", runtime.ParamLocationQuery, *params.GroupScope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GroupDescription != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "GroupDescription", runtime.ParamLocationQuery, *params.GroupDescription); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GroupEmail != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "GroupEmail", runtime.ParamLocationQuery, *params.GroupEmail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADUserListUsersRequest generates requests for GetApiADUserListUsers
func NewGetApiADUserListUsersRequest(server string, params *GetApiADUserListUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/ListUsers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Recursive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Recursive", runtime.ParamLocationQuery, *params.Recursive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADUserListUsersAllRequest generates requests for GetApiADUserListUsersAll
func NewGetApiADUserListUsersAllRequest(server string, params *GetApiADUserListUsersAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/ListUsers/All")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewDeleteApiADUserUsernameRequest generates requests for DeleteApiADUserUsername
func NewDeleteApiADUserUsernameRequest(server string, username string, params *DeleteApiADUserUsernameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewAPIUserRequest generates requests for APIUser
func NewAPIUserRequest(server string, username string, params *APIUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Password != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Password", runtime.ParamLocationQuery, *params.Password); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FirstName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FirstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Initials != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Initials", runtime.ParamLocationQuery, *params.Initials); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "LastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DisplayName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DisplayName", runtime.ParamLocationQuery, *params.DisplayName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmailAddress != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EmailAddress", runtime.ParamLocationQuery, *params.EmailAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Department != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Department", runtime.ParamLocationQuery, *params.Department); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Office != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Office", runtime.ParamLocationQuery, *params.Office); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Company != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Company", runtime.ParamLocationQuery, *params.Company); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ChangePasswordNextLogon != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ChangePasswordNextLogon", runtime.ParamLocationQuery, *params.ChangePasswordNextLogon); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PasswordNeverExpired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PasswordNeverExpired", runtime.ParamLocationQuery, *params.PasswordNeverExpired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.JobTitle != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "JobTitle", runtime.ParamLocationQuery, *params.JobTitle); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Manager != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Manager", runtime.ParamLocationQuery, *params.Manager); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Street != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Street", runtime.ParamLocationQuery, *params.Street); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.POBox != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "POBox", runtime.ParamLocationQuery, *params.POBox); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.City != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "City", runtime.ParamLocationQuery, *params.City); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "State", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZipCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ZipCode", runtime.ParamLocationQuery, *params.ZipCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Country != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Country", runtime.ParamLocationQuery, *params.Country); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OfficePhone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OfficePhone", runtime.ParamLocationQuery, *params.OfficePhone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HomePhone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HomePhone", runtime.ParamLocationQuery, *params.HomePhone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MobilePhone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MobilePhone", runtime.ParamLocationQuery, *params.MobilePhone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProfilePath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ProfilePath", runtime.ParamLocationQuery, *params.ProfilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProfileLogonScript != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ProfileLogonScript", runtime.ParamLocationQuery, *params.ProfileLogonScript); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HomeFolderPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HomeFolderPath", runtime.ParamLocationQuery, *params.HomeFolderPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HomeFolderDrive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HomeFolderDrive", runtime.ParamLocationQuery, *params.HomeFolderDrive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HomeFolderDirectory != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HomeFolderDirectory", runtime.ParamLocationQuery, *params.HomeFolderDirectory); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsProfilePath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsProfilePath", runtime.ParamLocationQuery, *params.RdsProfilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsHomeFolderPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsHomeFolderPath", runtime.ParamLocationQuery, *params.RdsHomeFolderPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsHomeFolderDrive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsHomeFolderDrive", runtime.ParamLocationQuery, *params.RdsHomeFolderDrive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsConnectDrive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsConnectDrive", runtime.ParamLocationQuery, *params.RdsConnectDrive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsAllowLogon != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsAllowLogon", runtime.ParamLocationQuery, *params.RdsAllowLogon); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPutApiADUserUsernameRequest generates requests for PutApiADUserUsername
func NewPutApiADUserUsernameRequest(server string, username string, params *PutApiADUserUsernameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FirstName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FirstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Initials != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Initials", runtime.ParamLocationQuery, *params.Initials); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "LastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DisplayName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DisplayName", runtime.ParamLocationQuery, *params.DisplayName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmailAddress != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EmailAddress", runtime.ParamLocationQuery, *params.EmailAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Department != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Department", runtime.ParamLocationQuery, *params.Department); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Office != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Office", runtime.ParamLocationQuery, *params.Office); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Company != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Company", runtime.ParamLocationQuery, *params.Company); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ChangePasswordNextLogon != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ChangePasswordNextLogon", runtime.ParamLocationQuery, *params.ChangePasswordNextLogon); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PasswordNeverExpired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PasswordNeverExpired", runtime.ParamLocationQuery, *params.PasswordNeverExpired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.JobTitle != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "JobTitle", runtime.ParamLocationQuery, *params.JobTitle); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Manager != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Manager", runtime.ParamLocationQuery, *params.Manager); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Street != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Street", runtime.ParamLocationQuery, *params.Street); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.POBox != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "POBox", runtime.ParamLocationQuery, *params.POBox); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.City != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "City", runtime.ParamLocationQuery, *params.City); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "State", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZipCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ZipCode", runtime.ParamLocationQuery, *params.ZipCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Country != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Country", runtime.ParamLocationQuery, *params.Country); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OfficePhone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OfficePhone", runtime.ParamLocationQuery, *params.OfficePhone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HomePhone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HomePhone", runtime.ParamLocationQuery, *params.HomePhone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MobilePhone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MobilePhone", runtime.ParamLocationQuery, *params.MobilePhone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProfilePath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ProfilePath", runtime.ParamLocationQuery, *params.ProfilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProfileLogonScript != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ProfileLogonScript", runtime.ParamLocationQuery, *params.ProfileLogonScript); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HomeFolderPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HomeFolderPath", runtime.ParamLocationQuery, *params.HomeFolderPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HomeFolderDrive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HomeFolderDrive", runtime.ParamLocationQuery, *params.HomeFolderDrive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HomeFolderDirectory != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HomeFolderDirectory", runtime.ParamLocationQuery, *params.HomeFolderDirectory); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsProfilePath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsProfilePath", runtime.ParamLocationQuery, *params.RdsProfilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsHomeFolderPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsHomeFolderPath", runtime.ParamLocationQuery, *params.RdsHomeFolderPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsHomeFolderDrive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsHomeFolderDrive", runtime.ParamLocationQuery, *params.RdsHomeFolderDrive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsConnectDrive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsConnectDrive", runtime.ParamLocationQuery, *params.RdsConnectDrive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsAllowLogon != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsAllowLogon", runtime.ParamLocationQuery, *params.RdsAllowLogon); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADUserUsernameDetailsRequest generates requests for GetApiADUserUsernameDetails
func NewGetApiADUserUsernameDetailsRequest(server string, username string, params *GetApiADUserUsernameDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s/Details", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPutApiADUserUsernameDisableRequest generates requests for PutApiADUserUsernameDisable
func NewPutApiADUserUsernameDisableRequest(server string, username string, params *PutApiADUserUsernameDisableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s/Disable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPutApiADUserUsernameEnableRequest generates requests for PutApiADUserUsernameEnable
func NewPutApiADUserUsernameEnableRequest(server string, username string, params *PutApiADUserUsernameEnableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s/Enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADUserUsernameExistsRequest generates requests for GetApiADUserUsernameExists
func NewGetApiADUserUsernameExistsRequest(server string, username string, params *GetApiADUserUsernameExistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s/Exists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADUserUsernameGroupAllRequest generates requests for GetApiADUserUsernameGroupAll
func NewGetApiADUserUsernameGroupAllRequest(server string, username string, params *GetApiADUserUsernameGroupAllParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s/Group/All", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewDeleteApiADUserUsernameGroupGroupNameRequest generates requests for DeleteApiADUserUsernameGroupGroupName
func NewDeleteApiADUserUsernameGroupGroupNameRequest(server string, username string, groupName string, params *DeleteApiADUserUsernameGroupGroupNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "GroupName", runtime.ParamLocationPath, groupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s/Group/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADUserUsernameGroupGroupNameRequest generates requests for GetApiADUserUsernameGroupGroupName
func NewGetApiADUserUsernameGroupGroupNameRequest(server string, username string, groupName string, params *GetApiADUserUsernameGroupGroupNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "GroupName", runtime.ParamLocationPath, groupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s/Group/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPostApiADUserUsernameGroupGroupNameRequest generates requests for PostApiADUserUsernameGroupGroupName
func NewPostApiADUserUsernameGroupGroupNameRequest(server string, username string, groupName string, params *PostApiADUserUsernameGroupGroupNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "GroupName", runtime.ParamLocationPath, groupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s/Group/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADUserUsernameGroupGroupNameExistsRequest generates requests for GetApiADUserUsernameGroupGroupNameExists
func NewGetApiADUserUsernameGroupGroupNameExistsRequest(server string, username string, groupName string, params *GetApiADUserUsernameGroupGroupNameExistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "GroupName", runtime.ParamLocationPath, groupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s/Group/%s/Exists", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADUserUsernameLastLogonRequest generates requests for GetApiADUserUsernameLastLogon
func NewGetApiADUserUsernameLastLogonRequest(server string, username string, params *GetApiADUserUsernameLastLogonParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s/LastLogon", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPutApiADUserUsernameRenameNewUsernameRequest generates requests for PutApiADUserUsernameRenameNewUsername
func NewPutApiADUserUsernameRenameNewUsernameRequest(server string, username string, newUsername string, params *PutApiADUserUsernameRenameNewUsernameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "NewUsername", runtime.ParamLocationPath, newUsername)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s/Rename/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPutApiADUserUsernameResetPasswordRequest generates requests for PutApiADUserUsernameResetPassword
func NewPutApiADUserUsernameResetPasswordRequest(server string, username string, params *PutApiADUserUsernameResetPasswordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s/ResetPassword", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.NewPassword != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newPassword", runtime.ParamLocationQuery, *params.NewPassword); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ChangePassword != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ChangePassword", runtime.ParamLocationQuery, *params.ChangePassword); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPutApiADUserUsernameUnlockRequest generates requests for PutApiADUserUsernameUnlock
func NewPutApiADUserUsernameUnlockRequest(server string, username string, params *PutApiADUserUsernameUnlockParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUser/%s/Unlock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewDeleteApiADUserGuidRequest generates requests for DeleteApiADUserGuid
func NewDeleteApiADUserGuidRequest(server string, params *DeleteApiADUserGuidParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUserGuid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.UserGuid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserGuid", runtime.ParamLocationQuery, *params.UserGuid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiADUserGuidRequest generates requests for GetApiADUserGuid
func NewGetApiADUserGuidRequest(server string, params *GetApiADUserGuidParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUserGuid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserGuid", runtime.ParamLocationQuery, params.UserGuid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPutApiADUserGuidRequest generates requests for PutApiADUserGuid
func NewPutApiADUserGuidRequest(server string, params *PutApiADUserGuidParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/ADUserGuid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UserGuid", runtime.ParamLocationQuery, params.UserGuid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.FirstName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FirstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Initials != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Initials", runtime.ParamLocationQuery, *params.Initials); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "LastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DisplayName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DisplayName", runtime.ParamLocationQuery, *params.DisplayName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EmailAddress != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EmailAddress", runtime.ParamLocationQuery, *params.EmailAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Department != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Department", runtime.ParamLocationQuery, *params.Department); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Office != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Office", runtime.ParamLocationQuery, *params.Office); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Company != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Company", runtime.ParamLocationQuery, *params.Company); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ChangePasswordNextLogon != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ChangePasswordNextLogon", runtime.ParamLocationQuery, *params.ChangePasswordNextLogon); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PasswordNeverExpired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PasswordNeverExpired", runtime.ParamLocationQuery, *params.PasswordNeverExpired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.JobTitle != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "JobTitle", runtime.ParamLocationQuery, *params.JobTitle); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Manager != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Manager", runtime.ParamLocationQuery, *params.Manager); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Street != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Street", runtime.ParamLocationQuery, *params.Street); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.POBox != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "POBox", runtime.ParamLocationQuery, *params.POBox); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.City != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "City", runtime.ParamLocationQuery, *params.City); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "State", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZipCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ZipCode", runtime.ParamLocationQuery, *params.ZipCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Country != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Country", runtime.ParamLocationQuery, *params.Country); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OfficePhone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OfficePhone", runtime.ParamLocationQuery, *params.OfficePhone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HomePhone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HomePhone", runtime.ParamLocationQuery, *params.HomePhone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MobilePhone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MobilePhone", runtime.ParamLocationQuery, *params.MobilePhone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProfilePath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ProfilePath", runtime.ParamLocationQuery, *params.ProfilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProfileLogonScript != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ProfileLogonScript", runtime.ParamLocationQuery, *params.ProfileLogonScript); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HomeFolderPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HomeFolderPath", runtime.ParamLocationQuery, *params.HomeFolderPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HomeFolderDrive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HomeFolderDrive", runtime.ParamLocationQuery, *params.HomeFolderDrive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HomeFolderDirectory != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HomeFolderDirectory", runtime.ParamLocationQuery, *params.HomeFolderDirectory); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsProfilePath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsProfilePath", runtime.ParamLocationQuery, *params.RdsProfilePath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsHomeFolderPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsHomeFolderPath", runtime.ParamLocationQuery, *params.RdsHomeFolderPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsHomeFolderDrive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsHomeFolderDrive", runtime.ParamLocationQuery, *params.RdsHomeFolderDrive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsConnectDrive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsConnectDrive", runtime.ParamLocationQuery, *params.RdsConnectDrive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RdsAllowLogon != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "RdsAllowLogon", runtime.ParamLocationQuery, *params.RdsAllowLogon); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShowFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShowFields", runtime.ParamLocationQuery, *params.ShowFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiComputersRequest generates requests for GetApiComputers
func NewGetApiComputersRequest(server string, params *GetApiComputersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Computers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Recursive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Recursive", runtime.ParamLocationQuery, *params.Recursive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiComputersAllRequest generates requests for GetApiComputersAll
func NewGetApiComputersAllRequest(server string, params *GetApiComputersAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Computers/All")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewDeleteApiComputersCleanUpRequest generates requests for DeleteApiComputersCleanUp
func NewDeleteApiComputersCleanUpRequest(server string, params *DeleteApiComputersCleanUpParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Computers/CleanUp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Days != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Days", runtime.ParamLocationQuery, *params.Days); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Recursive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Recursive", runtime.ParamLocationQuery, *params.Recursive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewDeleteApiComputersRemoveRequest generates requests for DeleteApiComputersRemove
func NewDeleteApiComputersRemoveRequest(server string, params *DeleteApiComputersRemoveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Computers/Remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.WildCard != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "WildCard", runtime.ParamLocationQuery, *params.WildCard); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Recursive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Recursive", runtime.ParamLocationQuery, *params.Recursive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiComputersADComputerNameRequest generates requests for GetApiComputersADComputerName
func NewGetApiComputersADComputerNameRequest(server string, aDComputerName string, params *GetApiComputersADComputerNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ADComputerName", runtime.ParamLocationPath, aDComputerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Computers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiComputersADComputerNameExistsRequest generates requests for GetApiComputersADComputerNameExists
func NewGetApiComputersADComputerNameExistsRequest(server string, aDComputerName string, params *GetApiComputersADComputerNameExistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ADComputerName", runtime.ParamLocationPath, aDComputerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Computers/%s/Exists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPostApiComputersADComputerNameRegisterRequest generates requests for PostApiComputersADComputerNameRegister
func NewPostApiComputersADComputerNameRegisterRequest(server string, aDComputerName string, params *PostApiComputersADComputerNameRegisterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ADComputerName", runtime.ParamLocationPath, aDComputerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Computers/%s/Register", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ADComputerDescription != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ADComputerDescription", runtime.ParamLocationQuery, *params.ADComputerDescription); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OUPath != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, *params.OUPath); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewDeleteApiComputersADComputerNameRemoveRequest generates requests for DeleteApiComputersADComputerNameRemove
func NewDeleteApiComputersADComputerNameRemoveRequest(server string, aDComputerName string, params *DeleteApiComputersADComputerNameRemoveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ADComputerName", runtime.ParamLocationPath, aDComputerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Computers/%s/Remove", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPutApiComputersADComputerNameRenameNewADComputerNameRequest generates requests for PutApiComputersADComputerNameRenameNewADComputerName
func NewPutApiComputersADComputerNameRenameNewADComputerNameRequest(server string, aDComputerName string, newADComputerName string, params *PutApiComputersADComputerNameRenameNewADComputerNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ADComputerName", runtime.ParamLocationPath, aDComputerName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "NewADComputerName", runtime.ParamLocationPath, newADComputerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Computers/%s/Rename/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPutApiComputersADComputerNameUpdateRequest generates requests for PutApiComputersADComputerNameUpdate
func NewPutApiComputersADComputerNameUpdateRequest(server string, aDComputerName string, params *PutApiComputersADComputerNameUpdateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ADComputerName", runtime.ParamLocationPath, aDComputerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Computers/%s/Update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ComputerDescription != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ComputerDescription", runtime.ParamLocationQuery, *params.ComputerDescription); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewDeleteApiDnsAAAARecordRequest generates requests for DeleteApiDnsAAAARecord
func NewDeleteApiDnsAAAARecordRequest(server string, params *DeleteApiDnsAAAARecordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsAAAARecord")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DNSHostName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DNS_HostName", runtime.ParamLocationQuery, *params.DNSHostName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IPv6Address != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IPv6_Address", runtime.ParamLocationQuery, *params.IPv6Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ZoneName", runtime.ParamLocationQuery, *params.ZoneName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsAAAARecordRequest generates requests for GetApiDnsAAAARecord
func NewGetApiDnsAAAARecordRequest(server string, params *GetApiDnsAAAARecordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsAAAARecord")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DNSHostName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DNS_HostName", runtime.ParamLocationQuery, *params.DNSHostName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IPv6Address != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IPv6_Address", runtime.ParamLocationQuery, *params.IPv6Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ZoneName", runtime.ParamLocationQuery, *params.ZoneName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPostApiDnsAAAARecordRequest generates requests for PostApiDnsAAAARecord
func NewPostApiDnsAAAARecordRequest(server string, params *PostApiDnsAAAARecordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsAAAARecord")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DNSHostName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DNS_HostName", runtime.ParamLocationQuery, *params.DNSHostName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IPv6Address != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IPv6_Address", runtime.ParamLocationQuery, *params.IPv6Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ZoneName", runtime.ParamLocationQuery, *params.ZoneName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsAAAARecordAllRequest generates requests for GetApiDnsAAAARecordAll
func NewGetApiDnsAAAARecordAllRequest(server string, params *GetApiDnsAAAARecordAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsAAAARecord/All")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsAAAARecordHostNameDNSHostNameRequest generates requests for GetApiDnsAAAARecordHostNameDNSHostName
func NewGetApiDnsAAAARecordHostNameDNSHostNameRequest(server string, dNSHostName string, params *GetApiDnsAAAARecordHostNameDNSHostNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "DNS_HostName", runtime.ParamLocationPath, dNSHostName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsAAAARecord/HostName/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsAAAARecordIPv6AddressIPv6AddressRequest generates requests for GetApiDnsAAAARecordIPv6AddressIPv6Address
func NewGetApiDnsAAAARecordIPv6AddressIPv6AddressRequest(server string, iPv6Address string, params *GetApiDnsAAAARecordIPv6AddressIPv6AddressParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "IPv6_Address", runtime.ParamLocationPath, iPv6Address)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsAAAARecord/IPv6Address/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsAAAARecordZoneNameRequest generates requests for GetApiDnsAAAARecordZoneName
func NewGetApiDnsAAAARecordZoneNameRequest(server string, zoneName string, params *GetApiDnsAAAARecordZoneNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ZoneName", runtime.ParamLocationPath, zoneName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsAAAARecord/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewDeleteApiDnsARecordRequest generates requests for DeleteApiDnsARecord
func NewDeleteApiDnsARecordRequest(server string, params *DeleteApiDnsARecordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsARecord")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DNSHostName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DNS_HostName", runtime.ParamLocationQuery, *params.DNSHostName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IPAddress != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IP_Address", runtime.ParamLocationQuery, *params.IPAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ZoneName", runtime.ParamLocationQuery, *params.ZoneName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsARecordRequest generates requests for GetApiDnsARecord
func NewGetApiDnsARecordRequest(server string, params *GetApiDnsARecordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsARecord")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DNSHostName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DNS_HostName", runtime.ParamLocationQuery, *params.DNSHostName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IPAddress != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IP_Address", runtime.ParamLocationQuery, *params.IPAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ZoneName", runtime.ParamLocationQuery, *params.ZoneName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPostApiDnsARecordRequest generates requests for PostApiDnsARecord
func NewPostApiDnsARecordRequest(server string, params *PostApiDnsARecordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsARecord")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DNSHostName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DNS_HostName", runtime.ParamLocationQuery, *params.DNSHostName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IPAddress != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IP_Address", runtime.ParamLocationQuery, *params.IPAddress); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ZoneName", runtime.ParamLocationQuery, *params.ZoneName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsARecordAllRequest generates requests for GetApiDnsARecordAll
func NewGetApiDnsARecordAllRequest(server string, params *GetApiDnsARecordAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsARecord/All")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsARecordHostNameDNSHostNameRequest generates requests for GetApiDnsARecordHostNameDNSHostName
func NewGetApiDnsARecordHostNameDNSHostNameRequest(server string, dNSHostName string, params *GetApiDnsARecordHostNameDNSHostNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "DNS_HostName", runtime.ParamLocationPath, dNSHostName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsARecord/HostName/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsARecordIPAddressIPAddressRequest generates requests for GetApiDnsARecordIPAddressIPAddress
func NewGetApiDnsARecordIPAddressIPAddressRequest(server string, iPAddress string, params *GetApiDnsARecordIPAddressIPAddressParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "IP_Address", runtime.ParamLocationPath, iPAddress)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsARecord/IPAddress/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsARecordZoneNameRequest generates requests for GetApiDnsARecordZoneName
func NewGetApiDnsARecordZoneNameRequest(server string, zoneName string, params *GetApiDnsARecordZoneNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ZoneName", runtime.ParamLocationPath, zoneName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsARecord/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewDeleteApiDnsCNameRecordRequest generates requests for DeleteApiDnsCNameRecord
func NewDeleteApiDnsCNameRecordRequest(server string, params *DeleteApiDnsCNameRecordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsCNameRecord")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DNSHostName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DNS_HostName", runtime.ParamLocationQuery, *params.DNSHostName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DNSHostNameAlias != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DNS_HostName_Alias", runtime.ParamLocationQuery, *params.DNSHostNameAlias); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ZoneName", runtime.ParamLocationQuery, *params.ZoneName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsCNameRecordRequest generates requests for GetApiDnsCNameRecord
func NewGetApiDnsCNameRecordRequest(server string, params *GetApiDnsCNameRecordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsCNameRecord")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DNSHostName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DNS_HostName", runtime.ParamLocationQuery, *params.DNSHostName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DNSHostNameAlias != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DNS_HostName_Alias", runtime.ParamLocationQuery, *params.DNSHostNameAlias); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ZoneName", runtime.ParamLocationQuery, *params.ZoneName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPostApiDnsCNameRecordRequest generates requests for PostApiDnsCNameRecord
func NewPostApiDnsCNameRecordRequest(server string, params *PostApiDnsCNameRecordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsCNameRecord")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DNSHostName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DNS_HostName", runtime.ParamLocationQuery, *params.DNSHostName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DNSHostNameAlias != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DNS_HostName_Alias", runtime.ParamLocationQuery, *params.DNSHostNameAlias); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ZoneName", runtime.ParamLocationQuery, *params.ZoneName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsCNameRecordAllRequest generates requests for GetApiDnsCNameRecordAll
func NewGetApiDnsCNameRecordAllRequest(server string, params *GetApiDnsCNameRecordAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsCNameRecord/All")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsCNameRecordHostNameDNSHostNameRequest generates requests for GetApiDnsCNameRecordHostNameDNSHostName
func NewGetApiDnsCNameRecordHostNameDNSHostNameRequest(server string, dNSHostName string, params *GetApiDnsCNameRecordHostNameDNSHostNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "DNS_HostName", runtime.ParamLocationPath, dNSHostName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsCNameRecord/HostName/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsCNameRecordHostNameAliasDNSHostNameAliasRequest generates requests for GetApiDnsCNameRecordHostNameAliasDNSHostNameAlias
func NewGetApiDnsCNameRecordHostNameAliasDNSHostNameAliasRequest(server string, dNSHostNameAlias string, params *GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "DNS_HostName_Alias", runtime.ParamLocationPath, dNSHostNameAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsCNameRecord/HostNameAlias/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsCNameRecordZoneNameRequest generates requests for GetApiDnsCNameRecordZoneName
func NewGetApiDnsCNameRecordZoneNameRequest(server string, zoneName string, params *GetApiDnsCNameRecordZoneNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ZoneName", runtime.ParamLocationPath, zoneName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsCNameRecord/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsLookupZoneAllRequest generates requests for GetApiDnsLookupZoneAll
func NewGetApiDnsLookupZoneAllRequest(server string, params *GetApiDnsLookupZoneAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsLookupZone/All")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IgnoreSystemZones != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IgnoreSystemZones", runtime.ParamLocationQuery, *params.IgnoreSystemZones); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewDeleteApiDnsLookupZoneZoneNameRequest generates requests for DeleteApiDnsLookupZoneZoneName
func NewDeleteApiDnsLookupZoneZoneNameRequest(server string, zoneName string, params *DeleteApiDnsLookupZoneZoneNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ZoneName", runtime.ParamLocationPath, zoneName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsLookupZone/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPostApiDnsLookupZoneZoneNameRequest generates requests for PostApiDnsLookupZoneZoneName
func NewPostApiDnsLookupZoneZoneNameRequest(server string, zoneName string, params *PostApiDnsLookupZoneZoneNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ZoneName", runtime.ParamLocationPath, zoneName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsLookupZone/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsReverseLookupZoneAllRequest generates requests for GetApiDnsReverseLookupZoneAll
func NewGetApiDnsReverseLookupZoneAllRequest(server string, params *GetApiDnsReverseLookupZoneAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsReverseLookupZone/All")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IgnoreSystemZones != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IgnoreSystemZones", runtime.ParamLocationQuery, *params.IgnoreSystemZones); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewDeleteApiDnsReverseLookupZoneNetworkIDRequest generates requests for DeleteApiDnsReverseLookupZoneNetworkID
func NewDeleteApiDnsReverseLookupZoneNetworkIDRequest(server string, networkID string, params *DeleteApiDnsReverseLookupZoneNetworkIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "NetworkID", runtime.ParamLocationPath, networkID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsReverseLookupZone/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsReverseLookupZoneNetworkIDRequest generates requests for GetApiDnsReverseLookupZoneNetworkID
func NewGetApiDnsReverseLookupZoneNetworkIDRequest(server string, networkID string, params *GetApiDnsReverseLookupZoneNetworkIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "NetworkID", runtime.ParamLocationPath, networkID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsReverseLookupZone/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IgnoreSystemZones != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IgnoreSystemZones", runtime.ParamLocationQuery, *params.IgnoreSystemZones); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPostApiDnsReverseLookupZoneNetworkIDRequest generates requests for PostApiDnsReverseLookupZoneNetworkID
func NewPostApiDnsReverseLookupZoneNetworkIDRequest(server string, networkID string, params *PostApiDnsReverseLookupZoneNetworkIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "NetworkID", runtime.ParamLocationPath, networkID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsReverseLookupZone/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsZonesAllRequest generates requests for GetApiDnsZonesAll
func NewGetApiDnsZonesAllRequest(server string, params *GetApiDnsZonesAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsZones/All")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IgnoreSystemZones != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IgnoreSystemZones", runtime.ParamLocationQuery, *params.IgnoreSystemZones); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsZonesZoneNameRequest generates requests for GetApiDnsZonesZoneName
func NewGetApiDnsZonesZoneNameRequest(server string, zoneName string, params *GetApiDnsZonesZoneNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ZoneName", runtime.ParamLocationPath, zoneName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsZones/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IgnoreSystemZones != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IgnoreSystemZones", runtime.ParamLocationQuery, *params.IgnoreSystemZones); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiDnsZonesZoneNameExistsRequest generates requests for GetApiDnsZonesZoneNameExists
func NewGetApiDnsZonesZoneNameExistsRequest(server string, zoneName string, params *GetApiDnsZonesZoneNameExistsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ZoneName", runtime.ParamLocationPath, zoneName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/DnsZones/%s/Exists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPostApiLoginRequest generates requests for PostApiLogin
func NewPostApiLoginRequest(server string, params *PostApiLoginParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Username != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Password != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, *params.Password); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiOURequest generates requests for PostApiOU
func NewPostApiOURequest(server string, params *PostApiOUParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/OU")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUName", runtime.ParamLocationQuery, params.OUName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.OUDescription != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUDescription", runtime.ParamLocationQuery, *params.OUDescription); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUDestinationPath", runtime.ParamLocationQuery, params.OUDestinationPath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.IsProtected != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IsProtected", runtime.ParamLocationQuery, *params.IsProtected); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPutApiOURequest generates requests for PutApiOU
func NewPutApiOURequest(server string, params *PutApiOUParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/OU")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, params.OUPath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.OUDescription != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUDescription", runtime.ParamLocationQuery, *params.OUDescription); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsProtected != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IsProtected", runtime.ParamLocationQuery, *params.IsProtected); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiOUAllRequest generates requests for GetApiOUAll
func NewGetApiOUAllRequest(server string, params *GetApiOUAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/OU/All")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ListContainers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ListContainers", runtime.ParamLocationQuery, *params.ListContainers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetOUByGuidRequest generates requests for GetOUByGuid
func NewGetOUByGuidRequest(server string, params *GetOUByGuidParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/OU/Guid/Details")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUGuid", runtime.ParamLocationQuery, params.OUGuid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPutApiOUMoveRequest generates requests for PutApiOUMove
func NewPutApiOUMoveRequest(server string, params *PutApiOUMoveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/OU/Move")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, params.OUPath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUDestinationPath", runtime.ParamLocationQuery, params.OUDestinationPath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetOUByPathRequest generates requests for GetOUByPath
func NewGetOUByPathRequest(server string, params *GetOUByPathParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/OU/Path/Details")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, params.OUPath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewGetApiOUPathExistsRequest generates requests for GetApiOUPathExists
func NewGetApiOUPathExistsRequest(server string, params *GetApiOUPathExistsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/OU/Path/Exists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, params.OUPath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewDeleteApiOUPathRemoveRequest generates requests for DeleteApiOUPathRemove
func NewDeleteApiOUPathRemoveRequest(server string, params *DeleteApiOUPathRemoveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/OU/Path/Remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, params.OUPath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Force != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Force", runtime.ParamLocationQuery, *params.Force); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

// NewPutApiOURenameRequest generates requests for PutApiOURename
func NewPutApiOURenameRequest(server string, params *PutApiOURenameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/OU/Rename")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUPath", runtime.ParamLocationQuery, params.OUPath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "OUNewName", runtime.ParamLocationQuery, params.OUNewName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Auth-Token", runtime.ParamLocationHeader, params.AuthToken)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Auth-Token", headerParam0)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiADGroups request
	GetApiADGroupsWithResponse(ctx context.Context, params *GetApiADGroupsParams, reqEditors ...RequestEditorFn) (*GetApiADGroupsResponse, error)

	// GetApiADGroupsAll request
	GetApiADGroupsAllWithResponse(ctx context.Context, params *GetApiADGroupsAllParams, reqEditors ...RequestEditorFn) (*GetApiADGroupsAllResponse, error)

	// GetApiADGroupsDistributionAll request
	GetApiADGroupsDistributionAllWithResponse(ctx context.Context, params *GetApiADGroupsDistributionAllParams, reqEditors ...RequestEditorFn) (*GetApiADGroupsDistributionAllResponse, error)

	// GetApiADGroupsSecurityAll request
	GetApiADGroupsSecurityAllWithResponse(ctx context.Context, params *GetApiADGroupsSecurityAllParams, reqEditors ...RequestEditorFn) (*GetApiADGroupsSecurityAllResponse, error)

	// GetApiADGroupsGroupName request
	GetApiADGroupsGroupNameWithResponse(ctx context.Context, groupName string, params *GetApiADGroupsGroupNameParams, reqEditors ...RequestEditorFn) (*GetApiADGroupsGroupNameResponse, error)

	// PostApiADGroupsGroupNameDistribution request
	PostApiADGroupsGroupNameDistributionWithResponse(ctx context.Context, groupName string, params *PostApiADGroupsGroupNameDistributionParams, reqEditors ...RequestEditorFn) (*PostApiADGroupsGroupNameDistributionResponse, error)

	// GetApiADGroupsGroupNameExists request
	GetApiADGroupsGroupNameExistsWithResponse(ctx context.Context, groupName string, params *GetApiADGroupsGroupNameExistsParams, reqEditors ...RequestEditorFn) (*GetApiADGroupsGroupNameExistsResponse, error)

	// DeleteApiADGroupsGroupNameRemove request
	DeleteApiADGroupsGroupNameRemoveWithResponse(ctx context.Context, groupName string, params *DeleteApiADGroupsGroupNameRemoveParams, reqEditors ...RequestEditorFn) (*DeleteApiADGroupsGroupNameRemoveResponse, error)

	// PutApiADGroupsGroupNameRenameNewGroupName request
	PutApiADGroupsGroupNameRenameNewGroupNameWithResponse(ctx context.Context, groupName string, newGroupName string, params *PutApiADGroupsGroupNameRenameNewGroupNameParams, reqEditors ...RequestEditorFn) (*PutApiADGroupsGroupNameRenameNewGroupNameResponse, error)

	// PostApiADGroupsGroupNameSecurity request
	PostApiADGroupsGroupNameSecurityWithResponse(ctx context.Context, groupName string, params *PostApiADGroupsGroupNameSecurityParams, reqEditors ...RequestEditorFn) (*PostApiADGroupsGroupNameSecurityResponse, error)

	// GetApiADUserListUsers request
	GetApiADUserListUsersWithResponse(ctx context.Context, params *GetApiADUserListUsersParams, reqEditors ...RequestEditorFn) (*GetApiADUserListUsersResponse, error)

	// GetApiADUserListUsersAll request
	GetApiADUserListUsersAllWithResponse(ctx context.Context, params *GetApiADUserListUsersAllParams, reqEditors ...RequestEditorFn) (*GetApiADUserListUsersAllResponse, error)

	// DeleteApiADUserUsername request
	DeleteApiADUserUsernameWithResponse(ctx context.Context, username string, params *DeleteApiADUserUsernameParams, reqEditors ...RequestEditorFn) (*DeleteApiADUserUsernameResponse, error)

	// APIUser request
	APIUserWithResponse(ctx context.Context, username string, params *APIUserParams, reqEditors ...RequestEditorFn) (*APIUserResponse, error)

	// PutApiADUserUsername request
	PutApiADUserUsernameWithResponse(ctx context.Context, username string, params *PutApiADUserUsernameParams, reqEditors ...RequestEditorFn) (*PutApiADUserUsernameResponse, error)

	// GetApiADUserUsernameDetails request
	GetApiADUserUsernameDetailsWithResponse(ctx context.Context, username string, params *GetApiADUserUsernameDetailsParams, reqEditors ...RequestEditorFn) (*GetApiADUserUsernameDetailsResponse, error)

	// PutApiADUserUsernameDisable request
	PutApiADUserUsernameDisableWithResponse(ctx context.Context, username string, params *PutApiADUserUsernameDisableParams, reqEditors ...RequestEditorFn) (*PutApiADUserUsernameDisableResponse, error)

	// PutApiADUserUsernameEnable request
	PutApiADUserUsernameEnableWithResponse(ctx context.Context, username string, params *PutApiADUserUsernameEnableParams, reqEditors ...RequestEditorFn) (*PutApiADUserUsernameEnableResponse, error)

	// GetApiADUserUsernameExists request
	GetApiADUserUsernameExistsWithResponse(ctx context.Context, username string, params *GetApiADUserUsernameExistsParams, reqEditors ...RequestEditorFn) (*GetApiADUserUsernameExistsResponse, error)

	// GetApiADUserUsernameGroupAll request
	GetApiADUserUsernameGroupAllWithResponse(ctx context.Context, username string, params *GetApiADUserUsernameGroupAllParams, reqEditors ...RequestEditorFn) (*GetApiADUserUsernameGroupAllResponse, error)

	// DeleteApiADUserUsernameGroupGroupName request
	DeleteApiADUserUsernameGroupGroupNameWithResponse(ctx context.Context, username string, groupName string, params *DeleteApiADUserUsernameGroupGroupNameParams, reqEditors ...RequestEditorFn) (*DeleteApiADUserUsernameGroupGroupNameResponse, error)

	// GetApiADUserUsernameGroupGroupName request
	GetApiADUserUsernameGroupGroupNameWithResponse(ctx context.Context, username string, groupName string, params *GetApiADUserUsernameGroupGroupNameParams, reqEditors ...RequestEditorFn) (*GetApiADUserUsernameGroupGroupNameResponse, error)

	// PostApiADUserUsernameGroupGroupName request
	PostApiADUserUsernameGroupGroupNameWithResponse(ctx context.Context, username string, groupName string, params *PostApiADUserUsernameGroupGroupNameParams, reqEditors ...RequestEditorFn) (*PostApiADUserUsernameGroupGroupNameResponse, error)

	// GetApiADUserUsernameGroupGroupNameExists request
	GetApiADUserUsernameGroupGroupNameExistsWithResponse(ctx context.Context, username string, groupName string, params *GetApiADUserUsernameGroupGroupNameExistsParams, reqEditors ...RequestEditorFn) (*GetApiADUserUsernameGroupGroupNameExistsResponse, error)

	// GetApiADUserUsernameLastLogon request
	GetApiADUserUsernameLastLogonWithResponse(ctx context.Context, username string, params *GetApiADUserUsernameLastLogonParams, reqEditors ...RequestEditorFn) (*GetApiADUserUsernameLastLogonResponse, error)

	// PutApiADUserUsernameRenameNewUsername request
	PutApiADUserUsernameRenameNewUsernameWithResponse(ctx context.Context, username string, newUsername string, params *PutApiADUserUsernameRenameNewUsernameParams, reqEditors ...RequestEditorFn) (*PutApiADUserUsernameRenameNewUsernameResponse, error)

	// PutApiADUserUsernameResetPassword request
	PutApiADUserUsernameResetPasswordWithResponse(ctx context.Context, username string, params *PutApiADUserUsernameResetPasswordParams, reqEditors ...RequestEditorFn) (*PutApiADUserUsernameResetPasswordResponse, error)

	// PutApiADUserUsernameUnlock request
	PutApiADUserUsernameUnlockWithResponse(ctx context.Context, username string, params *PutApiADUserUsernameUnlockParams, reqEditors ...RequestEditorFn) (*PutApiADUserUsernameUnlockResponse, error)

	// DeleteApiADUserGuid request
	DeleteApiADUserGuidWithResponse(ctx context.Context, params *DeleteApiADUserGuidParams, reqEditors ...RequestEditorFn) (*DeleteApiADUserGuidResponse, error)

	// GetApiADUserGuid request
	GetApiADUserGuidWithResponse(ctx context.Context, params *GetApiADUserGuidParams, reqEditors ...RequestEditorFn) (*GetApiADUserGuidResponse, error)

	// PutApiADUserGuid request
	PutApiADUserGuidWithResponse(ctx context.Context, params *PutApiADUserGuidParams, reqEditors ...RequestEditorFn) (*PutApiADUserGuidResponse, error)

	// GetApiComputers request
	GetApiComputersWithResponse(ctx context.Context, params *GetApiComputersParams, reqEditors ...RequestEditorFn) (*GetApiComputersResponse, error)

	// GetApiComputersAll request
	GetApiComputersAllWithResponse(ctx context.Context, params *GetApiComputersAllParams, reqEditors ...RequestEditorFn) (*GetApiComputersAllResponse, error)

	// DeleteApiComputersCleanUp request
	DeleteApiComputersCleanUpWithResponse(ctx context.Context, params *DeleteApiComputersCleanUpParams, reqEditors ...RequestEditorFn) (*DeleteApiComputersCleanUpResponse, error)

	// DeleteApiComputersRemove request
	DeleteApiComputersRemoveWithResponse(ctx context.Context, params *DeleteApiComputersRemoveParams, reqEditors ...RequestEditorFn) (*DeleteApiComputersRemoveResponse, error)

	// GetApiComputersADComputerName request
	GetApiComputersADComputerNameWithResponse(ctx context.Context, aDComputerName string, params *GetApiComputersADComputerNameParams, reqEditors ...RequestEditorFn) (*GetApiComputersADComputerNameResponse, error)

	// GetApiComputersADComputerNameExists request
	GetApiComputersADComputerNameExistsWithResponse(ctx context.Context, aDComputerName string, params *GetApiComputersADComputerNameExistsParams, reqEditors ...RequestEditorFn) (*GetApiComputersADComputerNameExistsResponse, error)

	// PostApiComputersADComputerNameRegister request
	PostApiComputersADComputerNameRegisterWithResponse(ctx context.Context, aDComputerName string, params *PostApiComputersADComputerNameRegisterParams, reqEditors ...RequestEditorFn) (*PostApiComputersADComputerNameRegisterResponse, error)

	// DeleteApiComputersADComputerNameRemove request
	DeleteApiComputersADComputerNameRemoveWithResponse(ctx context.Context, aDComputerName string, params *DeleteApiComputersADComputerNameRemoveParams, reqEditors ...RequestEditorFn) (*DeleteApiComputersADComputerNameRemoveResponse, error)

	// PutApiComputersADComputerNameRenameNewADComputerName request
	PutApiComputersADComputerNameRenameNewADComputerNameWithResponse(ctx context.Context, aDComputerName string, newADComputerName string, params *PutApiComputersADComputerNameRenameNewADComputerNameParams, reqEditors ...RequestEditorFn) (*PutApiComputersADComputerNameRenameNewADComputerNameResponse, error)

	// PutApiComputersADComputerNameUpdate request
	PutApiComputersADComputerNameUpdateWithResponse(ctx context.Context, aDComputerName string, params *PutApiComputersADComputerNameUpdateParams, reqEditors ...RequestEditorFn) (*PutApiComputersADComputerNameUpdateResponse, error)

	// DeleteApiDnsAAAARecord request
	DeleteApiDnsAAAARecordWithResponse(ctx context.Context, params *DeleteApiDnsAAAARecordParams, reqEditors ...RequestEditorFn) (*DeleteApiDnsAAAARecordResponse, error)

	// GetApiDnsAAAARecord request
	GetApiDnsAAAARecordWithResponse(ctx context.Context, params *GetApiDnsAAAARecordParams, reqEditors ...RequestEditorFn) (*GetApiDnsAAAARecordResponse, error)

	// PostApiDnsAAAARecord request
	PostApiDnsAAAARecordWithResponse(ctx context.Context, params *PostApiDnsAAAARecordParams, reqEditors ...RequestEditorFn) (*PostApiDnsAAAARecordResponse, error)

	// GetApiDnsAAAARecordAll request
	GetApiDnsAAAARecordAllWithResponse(ctx context.Context, params *GetApiDnsAAAARecordAllParams, reqEditors ...RequestEditorFn) (*GetApiDnsAAAARecordAllResponse, error)

	// GetApiDnsAAAARecordHostNameDNSHostName request
	GetApiDnsAAAARecordHostNameDNSHostNameWithResponse(ctx context.Context, dNSHostName string, params *GetApiDnsAAAARecordHostNameDNSHostNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsAAAARecordHostNameDNSHostNameResponse, error)

	// GetApiDnsAAAARecordIPv6AddressIPv6Address request
	GetApiDnsAAAARecordIPv6AddressIPv6AddressWithResponse(ctx context.Context, iPv6Address string, params *GetApiDnsAAAARecordIPv6AddressIPv6AddressParams, reqEditors ...RequestEditorFn) (*GetApiDnsAAAARecordIPv6AddressIPv6AddressResponse, error)

	// GetApiDnsAAAARecordZoneName request
	GetApiDnsAAAARecordZoneNameWithResponse(ctx context.Context, zoneName string, params *GetApiDnsAAAARecordZoneNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsAAAARecordZoneNameResponse, error)

	// DeleteApiDnsARecord request
	DeleteApiDnsARecordWithResponse(ctx context.Context, params *DeleteApiDnsARecordParams, reqEditors ...RequestEditorFn) (*DeleteApiDnsARecordResponse, error)

	// GetApiDnsARecord request
	GetApiDnsARecordWithResponse(ctx context.Context, params *GetApiDnsARecordParams, reqEditors ...RequestEditorFn) (*GetApiDnsARecordResponse, error)

	// PostApiDnsARecord request
	PostApiDnsARecordWithResponse(ctx context.Context, params *PostApiDnsARecordParams, reqEditors ...RequestEditorFn) (*PostApiDnsARecordResponse, error)

	// GetApiDnsARecordAll request
	GetApiDnsARecordAllWithResponse(ctx context.Context, params *GetApiDnsARecordAllParams, reqEditors ...RequestEditorFn) (*GetApiDnsARecordAllResponse, error)

	// GetApiDnsARecordHostNameDNSHostName request
	GetApiDnsARecordHostNameDNSHostNameWithResponse(ctx context.Context, dNSHostName string, params *GetApiDnsARecordHostNameDNSHostNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsARecordHostNameDNSHostNameResponse, error)

	// GetApiDnsARecordIPAddressIPAddress request
	GetApiDnsARecordIPAddressIPAddressWithResponse(ctx context.Context, iPAddress string, params *GetApiDnsARecordIPAddressIPAddressParams, reqEditors ...RequestEditorFn) (*GetApiDnsARecordIPAddressIPAddressResponse, error)

	// GetApiDnsARecordZoneName request
	GetApiDnsARecordZoneNameWithResponse(ctx context.Context, zoneName string, params *GetApiDnsARecordZoneNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsARecordZoneNameResponse, error)

	// DeleteApiDnsCNameRecord request
	DeleteApiDnsCNameRecordWithResponse(ctx context.Context, params *DeleteApiDnsCNameRecordParams, reqEditors ...RequestEditorFn) (*DeleteApiDnsCNameRecordResponse, error)

	// GetApiDnsCNameRecord request
	GetApiDnsCNameRecordWithResponse(ctx context.Context, params *GetApiDnsCNameRecordParams, reqEditors ...RequestEditorFn) (*GetApiDnsCNameRecordResponse, error)

	// PostApiDnsCNameRecord request
	PostApiDnsCNameRecordWithResponse(ctx context.Context, params *PostApiDnsCNameRecordParams, reqEditors ...RequestEditorFn) (*PostApiDnsCNameRecordResponse, error)

	// GetApiDnsCNameRecordAll request
	GetApiDnsCNameRecordAllWithResponse(ctx context.Context, params *GetApiDnsCNameRecordAllParams, reqEditors ...RequestEditorFn) (*GetApiDnsCNameRecordAllResponse, error)

	// GetApiDnsCNameRecordHostNameDNSHostName request
	GetApiDnsCNameRecordHostNameDNSHostNameWithResponse(ctx context.Context, dNSHostName string, params *GetApiDnsCNameRecordHostNameDNSHostNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsCNameRecordHostNameDNSHostNameResponse, error)

	// GetApiDnsCNameRecordHostNameAliasDNSHostNameAlias request
	GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasWithResponse(ctx context.Context, dNSHostNameAlias string, params *GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasParams, reqEditors ...RequestEditorFn) (*GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasResponse, error)

	// GetApiDnsCNameRecordZoneName request
	GetApiDnsCNameRecordZoneNameWithResponse(ctx context.Context, zoneName string, params *GetApiDnsCNameRecordZoneNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsCNameRecordZoneNameResponse, error)

	// GetApiDnsLookupZoneAll request
	GetApiDnsLookupZoneAllWithResponse(ctx context.Context, params *GetApiDnsLookupZoneAllParams, reqEditors ...RequestEditorFn) (*GetApiDnsLookupZoneAllResponse, error)

	// DeleteApiDnsLookupZoneZoneName request
	DeleteApiDnsLookupZoneZoneNameWithResponse(ctx context.Context, zoneName string, params *DeleteApiDnsLookupZoneZoneNameParams, reqEditors ...RequestEditorFn) (*DeleteApiDnsLookupZoneZoneNameResponse, error)

	// PostApiDnsLookupZoneZoneName request
	PostApiDnsLookupZoneZoneNameWithResponse(ctx context.Context, zoneName string, params *PostApiDnsLookupZoneZoneNameParams, reqEditors ...RequestEditorFn) (*PostApiDnsLookupZoneZoneNameResponse, error)

	// GetApiDnsReverseLookupZoneAll request
	GetApiDnsReverseLookupZoneAllWithResponse(ctx context.Context, params *GetApiDnsReverseLookupZoneAllParams, reqEditors ...RequestEditorFn) (*GetApiDnsReverseLookupZoneAllResponse, error)

	// DeleteApiDnsReverseLookupZoneNetworkID request
	DeleteApiDnsReverseLookupZoneNetworkIDWithResponse(ctx context.Context, networkID string, params *DeleteApiDnsReverseLookupZoneNetworkIDParams, reqEditors ...RequestEditorFn) (*DeleteApiDnsReverseLookupZoneNetworkIDResponse, error)

	// GetApiDnsReverseLookupZoneNetworkID request
	GetApiDnsReverseLookupZoneNetworkIDWithResponse(ctx context.Context, networkID string, params *GetApiDnsReverseLookupZoneNetworkIDParams, reqEditors ...RequestEditorFn) (*GetApiDnsReverseLookupZoneNetworkIDResponse, error)

	// PostApiDnsReverseLookupZoneNetworkID request
	PostApiDnsReverseLookupZoneNetworkIDWithResponse(ctx context.Context, networkID string, params *PostApiDnsReverseLookupZoneNetworkIDParams, reqEditors ...RequestEditorFn) (*PostApiDnsReverseLookupZoneNetworkIDResponse, error)

	// GetApiDnsZonesAll request
	GetApiDnsZonesAllWithResponse(ctx context.Context, params *GetApiDnsZonesAllParams, reqEditors ...RequestEditorFn) (*GetApiDnsZonesAllResponse, error)

	// GetApiDnsZonesZoneName request
	GetApiDnsZonesZoneNameWithResponse(ctx context.Context, zoneName string, params *GetApiDnsZonesZoneNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsZonesZoneNameResponse, error)

	// GetApiDnsZonesZoneNameExists request
	GetApiDnsZonesZoneNameExistsWithResponse(ctx context.Context, zoneName string, params *GetApiDnsZonesZoneNameExistsParams, reqEditors ...RequestEditorFn) (*GetApiDnsZonesZoneNameExistsResponse, error)

	// PostApiLogin request
	PostApiLoginWithResponse(ctx context.Context, params *PostApiLoginParams, reqEditors ...RequestEditorFn) (*PostApiLoginResponse, error)

	// PostApiOU request
	PostApiOUWithResponse(ctx context.Context, params *PostApiOUParams, reqEditors ...RequestEditorFn) (*PostApiOUResponse, error)

	// PutApiOU request
	PutApiOUWithResponse(ctx context.Context, params *PutApiOUParams, reqEditors ...RequestEditorFn) (*PutApiOUResponse, error)

	// GetApiOUAll request
	GetApiOUAllWithResponse(ctx context.Context, params *GetApiOUAllParams, reqEditors ...RequestEditorFn) (*GetApiOUAllResponse, error)

	// GetOUByGuid request
	GetOUByGuidWithResponse(ctx context.Context, params *GetOUByGuidParams, reqEditors ...RequestEditorFn) (*GetOUByGuidResponse, error)

	// PutApiOUMove request
	PutApiOUMoveWithResponse(ctx context.Context, params *PutApiOUMoveParams, reqEditors ...RequestEditorFn) (*PutApiOUMoveResponse, error)

	// GetOUByPath request
	GetOUByPathWithResponse(ctx context.Context, params *GetOUByPathParams, reqEditors ...RequestEditorFn) (*GetOUByPathResponse, error)

	// GetApiOUPathExists request
	GetApiOUPathExistsWithResponse(ctx context.Context, params *GetApiOUPathExistsParams, reqEditors ...RequestEditorFn) (*GetApiOUPathExistsResponse, error)

	// DeleteApiOUPathRemove request
	DeleteApiOUPathRemoveWithResponse(ctx context.Context, params *DeleteApiOUPathRemoveParams, reqEditors ...RequestEditorFn) (*DeleteApiOUPathRemoveResponse, error)

	// PutApiOURename request
	PutApiOURenameWithResponse(ctx context.Context, params *PutApiOURenameParams, reqEditors ...RequestEditorFn) (*PutApiOURenameResponse, error)
}

type GetApiADGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupListResult
}

// Status returns HTTPResponse.Status
func (r GetApiADGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADGroupsAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupListResult
}

// Status returns HTTPResponse.Status
func (r GetApiADGroupsAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADGroupsAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADGroupsDistributionAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupListResult
}

// Status returns HTTPResponse.Status
func (r GetApiADGroupsDistributionAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADGroupsDistributionAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADGroupsSecurityAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupListResult
}

// Status returns HTTPResponse.Status
func (r GetApiADGroupsSecurityAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADGroupsSecurityAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADGroupsGroupNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResult
}

// Status returns HTTPResponse.Status
func (r GetApiADGroupsGroupNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADGroupsGroupNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiADGroupsGroupNameDistributionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResult
}

// Status returns HTTPResponse.Status
func (r PostApiADGroupsGroupNameDistributionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiADGroupsGroupNameDistributionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADGroupsGroupNameExistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BooleanResult
}

// Status returns HTTPResponse.Status
func (r GetApiADGroupsGroupNameExistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADGroupsGroupNameExistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiADGroupsGroupNameRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResult
}

// Status returns HTTPResponse.Status
func (r DeleteApiADGroupsGroupNameRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiADGroupsGroupNameRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiADGroupsGroupNameRenameNewGroupNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResult
}

// Status returns HTTPResponse.Status
func (r PutApiADGroupsGroupNameRenameNewGroupNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiADGroupsGroupNameRenameNewGroupNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiADGroupsGroupNameSecurityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResult
}

// Status returns HTTPResponse.Status
func (r PostApiADGroupsGroupNameSecurityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiADGroupsGroupNameSecurityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADUserListUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserListResult
}

// Status returns HTTPResponse.Status
func (r GetApiADUserListUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADUserListUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADUserListUsersAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserListResult
}

// Status returns HTTPResponse.Status
func (r GetApiADUserListUsersAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADUserListUsersAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiADUserUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResult
}

// Status returns HTTPResponse.Status
func (r DeleteApiADUserUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiADUserUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type APIUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResult
}

// Status returns HTTPResponse.Status
func (r APIUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r APIUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiADUserUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResult
}

// Status returns HTTPResponse.Status
func (r PutApiADUserUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiADUserUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADUserUsernameDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResult
}

// Status returns HTTPResponse.Status
func (r GetApiADUserUsernameDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADUserUsernameDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiADUserUsernameDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResult
}

// Status returns HTTPResponse.Status
func (r PutApiADUserUsernameDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiADUserUsernameDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiADUserUsernameEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResult
}

// Status returns HTTPResponse.Status
func (r PutApiADUserUsernameEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiADUserUsernameEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADUserUsernameExistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BooleanResult
}

// Status returns HTTPResponse.Status
func (r GetApiADUserUsernameExistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADUserUsernameExistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADUserUsernameGroupAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupListResult
}

// Status returns HTTPResponse.Status
func (r GetApiADUserUsernameGroupAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADUserUsernameGroupAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiADUserUsernameGroupGroupNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResult
}

// Status returns HTTPResponse.Status
func (r DeleteApiADUserUsernameGroupGroupNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiADUserUsernameGroupGroupNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADUserUsernameGroupGroupNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResult
}

// Status returns HTTPResponse.Status
func (r GetApiADUserUsernameGroupGroupNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADUserUsernameGroupGroupNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiADUserUsernameGroupGroupNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResult
}

// Status returns HTTPResponse.Status
func (r PostApiADUserUsernameGroupGroupNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiADUserUsernameGroupGroupNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADUserUsernameGroupGroupNameExistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BooleanResult
}

// Status returns HTTPResponse.Status
func (r GetApiADUserUsernameGroupGroupNameExistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADUserUsernameGroupGroupNameExistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADUserUsernameLastLogonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DateTimeResult
}

// Status returns HTTPResponse.Status
func (r GetApiADUserUsernameLastLogonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADUserUsernameLastLogonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiADUserUsernameRenameNewUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResult
}

// Status returns HTTPResponse.Status
func (r PutApiADUserUsernameRenameNewUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiADUserUsernameRenameNewUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiADUserUsernameResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResult
}

// Status returns HTTPResponse.Status
func (r PutApiADUserUsernameResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiADUserUsernameResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiADUserUsernameUnlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResult
}

// Status returns HTTPResponse.Status
func (r PutApiADUserUsernameUnlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiADUserUsernameUnlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiADUserGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResult
}

// Status returns HTTPResponse.Status
func (r DeleteApiADUserGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiADUserGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiADUserGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResult
}

// Status returns HTTPResponse.Status
func (r GetApiADUserGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiADUserGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiADUserGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResult
}

// Status returns HTTPResponse.Status
func (r PutApiADUserGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiADUserGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiComputersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerListResult
}

// Status returns HTTPResponse.Status
func (r GetApiComputersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiComputersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiComputersAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerListResult
}

// Status returns HTTPResponse.Status
func (r GetApiComputersAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiComputersAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiComputersCleanUpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerListResult
}

// Status returns HTTPResponse.Status
func (r DeleteApiComputersCleanUpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiComputersCleanUpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiComputersRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerListResult
}

// Status returns HTTPResponse.Status
func (r DeleteApiComputersRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiComputersRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiComputersADComputerNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerResult
}

// Status returns HTTPResponse.Status
func (r GetApiComputersADComputerNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiComputersADComputerNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiComputersADComputerNameExistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BooleanResult
}

// Status returns HTTPResponse.Status
func (r GetApiComputersADComputerNameExistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiComputersADComputerNameExistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiComputersADComputerNameRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerResult
}

// Status returns HTTPResponse.Status
func (r PostApiComputersADComputerNameRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiComputersADComputerNameRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiComputersADComputerNameRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerResult
}

// Status returns HTTPResponse.Status
func (r DeleteApiComputersADComputerNameRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiComputersADComputerNameRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiComputersADComputerNameRenameNewADComputerNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerResult
}

// Status returns HTTPResponse.Status
func (r PutApiComputersADComputerNameRenameNewADComputerNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiComputersADComputerNameRenameNewADComputerNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiComputersADComputerNameUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerResult
}

// Status returns HTTPResponse.Status
func (r PutApiComputersADComputerNameUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiComputersADComputerNameUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiDnsAAAARecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordResult
}

// Status returns HTTPResponse.Status
func (r DeleteApiDnsAAAARecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiDnsAAAARecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsAAAARecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsAAAARecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsAAAARecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiDnsAAAARecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordResult
}

// Status returns HTTPResponse.Status
func (r PostApiDnsAAAARecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiDnsAAAARecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsAAAARecordAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsAAAARecordAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsAAAARecordAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsAAAARecordHostNameDNSHostNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsAAAARecordHostNameDNSHostNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsAAAARecordHostNameDNSHostNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsAAAARecordIPv6AddressIPv6AddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsAAAARecordIPv6AddressIPv6AddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsAAAARecordIPv6AddressIPv6AddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsAAAARecordZoneNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsAAAARecordZoneNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsAAAARecordZoneNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiDnsARecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordResult
}

// Status returns HTTPResponse.Status
func (r DeleteApiDnsARecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiDnsARecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsARecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsARecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsARecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiDnsARecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordResult
}

// Status returns HTTPResponse.Status
func (r PostApiDnsARecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiDnsARecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsARecordAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsARecordAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsARecordAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsARecordHostNameDNSHostNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsARecordHostNameDNSHostNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsARecordHostNameDNSHostNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsARecordIPAddressIPAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsARecordIPAddressIPAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsARecordIPAddressIPAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsARecordZoneNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsARecordZoneNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsARecordZoneNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiDnsCNameRecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordResult
}

// Status returns HTTPResponse.Status
func (r DeleteApiDnsCNameRecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiDnsCNameRecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsCNameRecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsCNameRecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsCNameRecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiDnsCNameRecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordResult
}

// Status returns HTTPResponse.Status
func (r PostApiDnsCNameRecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiDnsCNameRecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsCNameRecordAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsCNameRecordAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsCNameRecordAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsCNameRecordHostNameDNSHostNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsCNameRecordHostNameDNSHostNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsCNameRecordHostNameDNSHostNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsCNameRecordZoneNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsRecordListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsCNameRecordZoneNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsCNameRecordZoneNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsLookupZoneAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsZoneListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsLookupZoneAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsLookupZoneAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiDnsLookupZoneZoneNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsZoneResult
}

// Status returns HTTPResponse.Status
func (r DeleteApiDnsLookupZoneZoneNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiDnsLookupZoneZoneNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiDnsLookupZoneZoneNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsZoneResult
}

// Status returns HTTPResponse.Status
func (r PostApiDnsLookupZoneZoneNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiDnsLookupZoneZoneNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsReverseLookupZoneAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsZoneListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsReverseLookupZoneAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsReverseLookupZoneAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiDnsReverseLookupZoneNetworkIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsZoneResult
}

// Status returns HTTPResponse.Status
func (r DeleteApiDnsReverseLookupZoneNetworkIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiDnsReverseLookupZoneNetworkIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsReverseLookupZoneNetworkIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsZoneResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsReverseLookupZoneNetworkIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsReverseLookupZoneNetworkIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiDnsReverseLookupZoneNetworkIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsZoneResult
}

// Status returns HTTPResponse.Status
func (r PostApiDnsReverseLookupZoneNetworkIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiDnsReverseLookupZoneNetworkIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsZonesAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsZoneListResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsZonesAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsZonesAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsZonesZoneNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsZoneResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsZonesZoneNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsZonesZoneNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsZonesZoneNameExistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BooleanResult
}

// Status returns HTTPResponse.Status
func (r GetApiDnsZonesZoneNameExistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsZonesZoneNameExistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StringResult
}

// Status returns HTTPResponse.Status
func (r PostApiLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiOUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OUResult
}

// Status returns HTTPResponse.Status
func (r PostApiOUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiOUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiOUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OUResult
}

// Status returns HTTPResponse.Status
func (r PutApiOUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiOUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiOUAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OUListResult
}

// Status returns HTTPResponse.Status
func (r GetApiOUAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiOUAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOUByGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OUResult
}

// Status returns HTTPResponse.Status
func (r GetOUByGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOUByGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiOUMoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OUResult
}

// Status returns HTTPResponse.Status
func (r PutApiOUMoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiOUMoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOUByPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OUResult
}

// Status returns HTTPResponse.Status
func (r GetOUByPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOUByPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiOUPathExistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BooleanResult
}

// Status returns HTTPResponse.Status
func (r GetApiOUPathExistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiOUPathExistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiOUPathRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OUResult
}

// Status returns HTTPResponse.Status
func (r DeleteApiOUPathRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiOUPathRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiOURenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OUResult
}

// Status returns HTTPResponse.Status
func (r PutApiOURenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiOURenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiADGroupsWithResponse request returning *GetApiADGroupsResponse
func (c *ClientWithResponses) GetApiADGroupsWithResponse(ctx context.Context, params *GetApiADGroupsParams, reqEditors ...RequestEditorFn) (*GetApiADGroupsResponse, error) {
	rsp, err := c.GetApiADGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADGroupsResponse(rsp)
}

// GetApiADGroupsAllWithResponse request returning *GetApiADGroupsAllResponse
func (c *ClientWithResponses) GetApiADGroupsAllWithResponse(ctx context.Context, params *GetApiADGroupsAllParams, reqEditors ...RequestEditorFn) (*GetApiADGroupsAllResponse, error) {
	rsp, err := c.GetApiADGroupsAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADGroupsAllResponse(rsp)
}

// GetApiADGroupsDistributionAllWithResponse request returning *GetApiADGroupsDistributionAllResponse
func (c *ClientWithResponses) GetApiADGroupsDistributionAllWithResponse(ctx context.Context, params *GetApiADGroupsDistributionAllParams, reqEditors ...RequestEditorFn) (*GetApiADGroupsDistributionAllResponse, error) {
	rsp, err := c.GetApiADGroupsDistributionAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADGroupsDistributionAllResponse(rsp)
}

// GetApiADGroupsSecurityAllWithResponse request returning *GetApiADGroupsSecurityAllResponse
func (c *ClientWithResponses) GetApiADGroupsSecurityAllWithResponse(ctx context.Context, params *GetApiADGroupsSecurityAllParams, reqEditors ...RequestEditorFn) (*GetApiADGroupsSecurityAllResponse, error) {
	rsp, err := c.GetApiADGroupsSecurityAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADGroupsSecurityAllResponse(rsp)
}

// GetApiADGroupsGroupNameWithResponse request returning *GetApiADGroupsGroupNameResponse
func (c *ClientWithResponses) GetApiADGroupsGroupNameWithResponse(ctx context.Context, groupName string, params *GetApiADGroupsGroupNameParams, reqEditors ...RequestEditorFn) (*GetApiADGroupsGroupNameResponse, error) {
	rsp, err := c.GetApiADGroupsGroupName(ctx, groupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADGroupsGroupNameResponse(rsp)
}

// PostApiADGroupsGroupNameDistributionWithResponse request returning *PostApiADGroupsGroupNameDistributionResponse
func (c *ClientWithResponses) PostApiADGroupsGroupNameDistributionWithResponse(ctx context.Context, groupName string, params *PostApiADGroupsGroupNameDistributionParams, reqEditors ...RequestEditorFn) (*PostApiADGroupsGroupNameDistributionResponse, error) {
	rsp, err := c.PostApiADGroupsGroupNameDistribution(ctx, groupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiADGroupsGroupNameDistributionResponse(rsp)
}

// GetApiADGroupsGroupNameExistsWithResponse request returning *GetApiADGroupsGroupNameExistsResponse
func (c *ClientWithResponses) GetApiADGroupsGroupNameExistsWithResponse(ctx context.Context, groupName string, params *GetApiADGroupsGroupNameExistsParams, reqEditors ...RequestEditorFn) (*GetApiADGroupsGroupNameExistsResponse, error) {
	rsp, err := c.GetApiADGroupsGroupNameExists(ctx, groupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADGroupsGroupNameExistsResponse(rsp)
}

// DeleteApiADGroupsGroupNameRemoveWithResponse request returning *DeleteApiADGroupsGroupNameRemoveResponse
func (c *ClientWithResponses) DeleteApiADGroupsGroupNameRemoveWithResponse(ctx context.Context, groupName string, params *DeleteApiADGroupsGroupNameRemoveParams, reqEditors ...RequestEditorFn) (*DeleteApiADGroupsGroupNameRemoveResponse, error) {
	rsp, err := c.DeleteApiADGroupsGroupNameRemove(ctx, groupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiADGroupsGroupNameRemoveResponse(rsp)
}

// PutApiADGroupsGroupNameRenameNewGroupNameWithResponse request returning *PutApiADGroupsGroupNameRenameNewGroupNameResponse
func (c *ClientWithResponses) PutApiADGroupsGroupNameRenameNewGroupNameWithResponse(ctx context.Context, groupName string, newGroupName string, params *PutApiADGroupsGroupNameRenameNewGroupNameParams, reqEditors ...RequestEditorFn) (*PutApiADGroupsGroupNameRenameNewGroupNameResponse, error) {
	rsp, err := c.PutApiADGroupsGroupNameRenameNewGroupName(ctx, groupName, newGroupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiADGroupsGroupNameRenameNewGroupNameResponse(rsp)
}

// PostApiADGroupsGroupNameSecurityWithResponse request returning *PostApiADGroupsGroupNameSecurityResponse
func (c *ClientWithResponses) PostApiADGroupsGroupNameSecurityWithResponse(ctx context.Context, groupName string, params *PostApiADGroupsGroupNameSecurityParams, reqEditors ...RequestEditorFn) (*PostApiADGroupsGroupNameSecurityResponse, error) {
	rsp, err := c.PostApiADGroupsGroupNameSecurity(ctx, groupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiADGroupsGroupNameSecurityResponse(rsp)
}

// GetApiADUserListUsersWithResponse request returning *GetApiADUserListUsersResponse
func (c *ClientWithResponses) GetApiADUserListUsersWithResponse(ctx context.Context, params *GetApiADUserListUsersParams, reqEditors ...RequestEditorFn) (*GetApiADUserListUsersResponse, error) {
	rsp, err := c.GetApiADUserListUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADUserListUsersResponse(rsp)
}

// GetApiADUserListUsersAllWithResponse request returning *GetApiADUserListUsersAllResponse
func (c *ClientWithResponses) GetApiADUserListUsersAllWithResponse(ctx context.Context, params *GetApiADUserListUsersAllParams, reqEditors ...RequestEditorFn) (*GetApiADUserListUsersAllResponse, error) {
	rsp, err := c.GetApiADUserListUsersAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADUserListUsersAllResponse(rsp)
}

// DeleteApiADUserUsernameWithResponse request returning *DeleteApiADUserUsernameResponse
func (c *ClientWithResponses) DeleteApiADUserUsernameWithResponse(ctx context.Context, username string, params *DeleteApiADUserUsernameParams, reqEditors ...RequestEditorFn) (*DeleteApiADUserUsernameResponse, error) {
	rsp, err := c.DeleteApiADUserUsername(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiADUserUsernameResponse(rsp)
}

// APIUserWithResponse request returning *APIUserResponse
func (c *ClientWithResponses) APIUserWithResponse(ctx context.Context, username string, params *APIUserParams, reqEditors ...RequestEditorFn) (*APIUserResponse, error) {
	rsp, err := c.APIUser(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAPIUserResponse(rsp)
}

// PutApiADUserUsernameWithResponse request returning *PutApiADUserUsernameResponse
func (c *ClientWithResponses) PutApiADUserUsernameWithResponse(ctx context.Context, username string, params *PutApiADUserUsernameParams, reqEditors ...RequestEditorFn) (*PutApiADUserUsernameResponse, error) {
	rsp, err := c.PutApiADUserUsername(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiADUserUsernameResponse(rsp)
}

// GetApiADUserUsernameDetailsWithResponse request returning *GetApiADUserUsernameDetailsResponse
func (c *ClientWithResponses) GetApiADUserUsernameDetailsWithResponse(ctx context.Context, username string, params *GetApiADUserUsernameDetailsParams, reqEditors ...RequestEditorFn) (*GetApiADUserUsernameDetailsResponse, error) {
	rsp, err := c.GetApiADUserUsernameDetails(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADUserUsernameDetailsResponse(rsp)
}

// PutApiADUserUsernameDisableWithResponse request returning *PutApiADUserUsernameDisableResponse
func (c *ClientWithResponses) PutApiADUserUsernameDisableWithResponse(ctx context.Context, username string, params *PutApiADUserUsernameDisableParams, reqEditors ...RequestEditorFn) (*PutApiADUserUsernameDisableResponse, error) {
	rsp, err := c.PutApiADUserUsernameDisable(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiADUserUsernameDisableResponse(rsp)
}

// PutApiADUserUsernameEnableWithResponse request returning *PutApiADUserUsernameEnableResponse
func (c *ClientWithResponses) PutApiADUserUsernameEnableWithResponse(ctx context.Context, username string, params *PutApiADUserUsernameEnableParams, reqEditors ...RequestEditorFn) (*PutApiADUserUsernameEnableResponse, error) {
	rsp, err := c.PutApiADUserUsernameEnable(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiADUserUsernameEnableResponse(rsp)
}

// GetApiADUserUsernameExistsWithResponse request returning *GetApiADUserUsernameExistsResponse
func (c *ClientWithResponses) GetApiADUserUsernameExistsWithResponse(ctx context.Context, username string, params *GetApiADUserUsernameExistsParams, reqEditors ...RequestEditorFn) (*GetApiADUserUsernameExistsResponse, error) {
	rsp, err := c.GetApiADUserUsernameExists(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADUserUsernameExistsResponse(rsp)
}

// GetApiADUserUsernameGroupAllWithResponse request returning *GetApiADUserUsernameGroupAllResponse
func (c *ClientWithResponses) GetApiADUserUsernameGroupAllWithResponse(ctx context.Context, username string, params *GetApiADUserUsernameGroupAllParams, reqEditors ...RequestEditorFn) (*GetApiADUserUsernameGroupAllResponse, error) {
	rsp, err := c.GetApiADUserUsernameGroupAll(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADUserUsernameGroupAllResponse(rsp)
}

// DeleteApiADUserUsernameGroupGroupNameWithResponse request returning *DeleteApiADUserUsernameGroupGroupNameResponse
func (c *ClientWithResponses) DeleteApiADUserUsernameGroupGroupNameWithResponse(ctx context.Context, username string, groupName string, params *DeleteApiADUserUsernameGroupGroupNameParams, reqEditors ...RequestEditorFn) (*DeleteApiADUserUsernameGroupGroupNameResponse, error) {
	rsp, err := c.DeleteApiADUserUsernameGroupGroupName(ctx, username, groupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiADUserUsernameGroupGroupNameResponse(rsp)
}

// GetApiADUserUsernameGroupGroupNameWithResponse request returning *GetApiADUserUsernameGroupGroupNameResponse
func (c *ClientWithResponses) GetApiADUserUsernameGroupGroupNameWithResponse(ctx context.Context, username string, groupName string, params *GetApiADUserUsernameGroupGroupNameParams, reqEditors ...RequestEditorFn) (*GetApiADUserUsernameGroupGroupNameResponse, error) {
	rsp, err := c.GetApiADUserUsernameGroupGroupName(ctx, username, groupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADUserUsernameGroupGroupNameResponse(rsp)
}

// PostApiADUserUsernameGroupGroupNameWithResponse request returning *PostApiADUserUsernameGroupGroupNameResponse
func (c *ClientWithResponses) PostApiADUserUsernameGroupGroupNameWithResponse(ctx context.Context, username string, groupName string, params *PostApiADUserUsernameGroupGroupNameParams, reqEditors ...RequestEditorFn) (*PostApiADUserUsernameGroupGroupNameResponse, error) {
	rsp, err := c.PostApiADUserUsernameGroupGroupName(ctx, username, groupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiADUserUsernameGroupGroupNameResponse(rsp)
}

// GetApiADUserUsernameGroupGroupNameExistsWithResponse request returning *GetApiADUserUsernameGroupGroupNameExistsResponse
func (c *ClientWithResponses) GetApiADUserUsernameGroupGroupNameExistsWithResponse(ctx context.Context, username string, groupName string, params *GetApiADUserUsernameGroupGroupNameExistsParams, reqEditors ...RequestEditorFn) (*GetApiADUserUsernameGroupGroupNameExistsResponse, error) {
	rsp, err := c.GetApiADUserUsernameGroupGroupNameExists(ctx, username, groupName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADUserUsernameGroupGroupNameExistsResponse(rsp)
}

// GetApiADUserUsernameLastLogonWithResponse request returning *GetApiADUserUsernameLastLogonResponse
func (c *ClientWithResponses) GetApiADUserUsernameLastLogonWithResponse(ctx context.Context, username string, params *GetApiADUserUsernameLastLogonParams, reqEditors ...RequestEditorFn) (*GetApiADUserUsernameLastLogonResponse, error) {
	rsp, err := c.GetApiADUserUsernameLastLogon(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADUserUsernameLastLogonResponse(rsp)
}

// PutApiADUserUsernameRenameNewUsernameWithResponse request returning *PutApiADUserUsernameRenameNewUsernameResponse
func (c *ClientWithResponses) PutApiADUserUsernameRenameNewUsernameWithResponse(ctx context.Context, username string, newUsername string, params *PutApiADUserUsernameRenameNewUsernameParams, reqEditors ...RequestEditorFn) (*PutApiADUserUsernameRenameNewUsernameResponse, error) {
	rsp, err := c.PutApiADUserUsernameRenameNewUsername(ctx, username, newUsername, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiADUserUsernameRenameNewUsernameResponse(rsp)
}

// PutApiADUserUsernameResetPasswordWithResponse request returning *PutApiADUserUsernameResetPasswordResponse
func (c *ClientWithResponses) PutApiADUserUsernameResetPasswordWithResponse(ctx context.Context, username string, params *PutApiADUserUsernameResetPasswordParams, reqEditors ...RequestEditorFn) (*PutApiADUserUsernameResetPasswordResponse, error) {
	rsp, err := c.PutApiADUserUsernameResetPassword(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiADUserUsernameResetPasswordResponse(rsp)
}

// PutApiADUserUsernameUnlockWithResponse request returning *PutApiADUserUsernameUnlockResponse
func (c *ClientWithResponses) PutApiADUserUsernameUnlockWithResponse(ctx context.Context, username string, params *PutApiADUserUsernameUnlockParams, reqEditors ...RequestEditorFn) (*PutApiADUserUsernameUnlockResponse, error) {
	rsp, err := c.PutApiADUserUsernameUnlock(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiADUserUsernameUnlockResponse(rsp)
}

// DeleteApiADUserGuidWithResponse request returning *DeleteApiADUserGuidResponse
func (c *ClientWithResponses) DeleteApiADUserGuidWithResponse(ctx context.Context, params *DeleteApiADUserGuidParams, reqEditors ...RequestEditorFn) (*DeleteApiADUserGuidResponse, error) {
	rsp, err := c.DeleteApiADUserGuid(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiADUserGuidResponse(rsp)
}

// GetApiADUserGuidWithResponse request returning *GetApiADUserGuidResponse
func (c *ClientWithResponses) GetApiADUserGuidWithResponse(ctx context.Context, params *GetApiADUserGuidParams, reqEditors ...RequestEditorFn) (*GetApiADUserGuidResponse, error) {
	rsp, err := c.GetApiADUserGuid(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiADUserGuidResponse(rsp)
}

// PutApiADUserGuidWithResponse request returning *PutApiADUserGuidResponse
func (c *ClientWithResponses) PutApiADUserGuidWithResponse(ctx context.Context, params *PutApiADUserGuidParams, reqEditors ...RequestEditorFn) (*PutApiADUserGuidResponse, error) {
	rsp, err := c.PutApiADUserGuid(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiADUserGuidResponse(rsp)
}

// GetApiComputersWithResponse request returning *GetApiComputersResponse
func (c *ClientWithResponses) GetApiComputersWithResponse(ctx context.Context, params *GetApiComputersParams, reqEditors ...RequestEditorFn) (*GetApiComputersResponse, error) {
	rsp, err := c.GetApiComputers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiComputersResponse(rsp)
}

// GetApiComputersAllWithResponse request returning *GetApiComputersAllResponse
func (c *ClientWithResponses) GetApiComputersAllWithResponse(ctx context.Context, params *GetApiComputersAllParams, reqEditors ...RequestEditorFn) (*GetApiComputersAllResponse, error) {
	rsp, err := c.GetApiComputersAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiComputersAllResponse(rsp)
}

// DeleteApiComputersCleanUpWithResponse request returning *DeleteApiComputersCleanUpResponse
func (c *ClientWithResponses) DeleteApiComputersCleanUpWithResponse(ctx context.Context, params *DeleteApiComputersCleanUpParams, reqEditors ...RequestEditorFn) (*DeleteApiComputersCleanUpResponse, error) {
	rsp, err := c.DeleteApiComputersCleanUp(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiComputersCleanUpResponse(rsp)
}

// DeleteApiComputersRemoveWithResponse request returning *DeleteApiComputersRemoveResponse
func (c *ClientWithResponses) DeleteApiComputersRemoveWithResponse(ctx context.Context, params *DeleteApiComputersRemoveParams, reqEditors ...RequestEditorFn) (*DeleteApiComputersRemoveResponse, error) {
	rsp, err := c.DeleteApiComputersRemove(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiComputersRemoveResponse(rsp)
}

// GetApiComputersADComputerNameWithResponse request returning *GetApiComputersADComputerNameResponse
func (c *ClientWithResponses) GetApiComputersADComputerNameWithResponse(ctx context.Context, aDComputerName string, params *GetApiComputersADComputerNameParams, reqEditors ...RequestEditorFn) (*GetApiComputersADComputerNameResponse, error) {
	rsp, err := c.GetApiComputersADComputerName(ctx, aDComputerName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiComputersADComputerNameResponse(rsp)
}

// GetApiComputersADComputerNameExistsWithResponse request returning *GetApiComputersADComputerNameExistsResponse
func (c *ClientWithResponses) GetApiComputersADComputerNameExistsWithResponse(ctx context.Context, aDComputerName string, params *GetApiComputersADComputerNameExistsParams, reqEditors ...RequestEditorFn) (*GetApiComputersADComputerNameExistsResponse, error) {
	rsp, err := c.GetApiComputersADComputerNameExists(ctx, aDComputerName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiComputersADComputerNameExistsResponse(rsp)
}

// PostApiComputersADComputerNameRegisterWithResponse request returning *PostApiComputersADComputerNameRegisterResponse
func (c *ClientWithResponses) PostApiComputersADComputerNameRegisterWithResponse(ctx context.Context, aDComputerName string, params *PostApiComputersADComputerNameRegisterParams, reqEditors ...RequestEditorFn) (*PostApiComputersADComputerNameRegisterResponse, error) {
	rsp, err := c.PostApiComputersADComputerNameRegister(ctx, aDComputerName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiComputersADComputerNameRegisterResponse(rsp)
}

// DeleteApiComputersADComputerNameRemoveWithResponse request returning *DeleteApiComputersADComputerNameRemoveResponse
func (c *ClientWithResponses) DeleteApiComputersADComputerNameRemoveWithResponse(ctx context.Context, aDComputerName string, params *DeleteApiComputersADComputerNameRemoveParams, reqEditors ...RequestEditorFn) (*DeleteApiComputersADComputerNameRemoveResponse, error) {
	rsp, err := c.DeleteApiComputersADComputerNameRemove(ctx, aDComputerName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiComputersADComputerNameRemoveResponse(rsp)
}

// PutApiComputersADComputerNameRenameNewADComputerNameWithResponse request returning *PutApiComputersADComputerNameRenameNewADComputerNameResponse
func (c *ClientWithResponses) PutApiComputersADComputerNameRenameNewADComputerNameWithResponse(ctx context.Context, aDComputerName string, newADComputerName string, params *PutApiComputersADComputerNameRenameNewADComputerNameParams, reqEditors ...RequestEditorFn) (*PutApiComputersADComputerNameRenameNewADComputerNameResponse, error) {
	rsp, err := c.PutApiComputersADComputerNameRenameNewADComputerName(ctx, aDComputerName, newADComputerName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiComputersADComputerNameRenameNewADComputerNameResponse(rsp)
}

// PutApiComputersADComputerNameUpdateWithResponse request returning *PutApiComputersADComputerNameUpdateResponse
func (c *ClientWithResponses) PutApiComputersADComputerNameUpdateWithResponse(ctx context.Context, aDComputerName string, params *PutApiComputersADComputerNameUpdateParams, reqEditors ...RequestEditorFn) (*PutApiComputersADComputerNameUpdateResponse, error) {
	rsp, err := c.PutApiComputersADComputerNameUpdate(ctx, aDComputerName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiComputersADComputerNameUpdateResponse(rsp)
}

// DeleteApiDnsAAAARecordWithResponse request returning *DeleteApiDnsAAAARecordResponse
func (c *ClientWithResponses) DeleteApiDnsAAAARecordWithResponse(ctx context.Context, params *DeleteApiDnsAAAARecordParams, reqEditors ...RequestEditorFn) (*DeleteApiDnsAAAARecordResponse, error) {
	rsp, err := c.DeleteApiDnsAAAARecord(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiDnsAAAARecordResponse(rsp)
}

// GetApiDnsAAAARecordWithResponse request returning *GetApiDnsAAAARecordResponse
func (c *ClientWithResponses) GetApiDnsAAAARecordWithResponse(ctx context.Context, params *GetApiDnsAAAARecordParams, reqEditors ...RequestEditorFn) (*GetApiDnsAAAARecordResponse, error) {
	rsp, err := c.GetApiDnsAAAARecord(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsAAAARecordResponse(rsp)
}

// PostApiDnsAAAARecordWithResponse request returning *PostApiDnsAAAARecordResponse
func (c *ClientWithResponses) PostApiDnsAAAARecordWithResponse(ctx context.Context, params *PostApiDnsAAAARecordParams, reqEditors ...RequestEditorFn) (*PostApiDnsAAAARecordResponse, error) {
	rsp, err := c.PostApiDnsAAAARecord(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDnsAAAARecordResponse(rsp)
}

// GetApiDnsAAAARecordAllWithResponse request returning *GetApiDnsAAAARecordAllResponse
func (c *ClientWithResponses) GetApiDnsAAAARecordAllWithResponse(ctx context.Context, params *GetApiDnsAAAARecordAllParams, reqEditors ...RequestEditorFn) (*GetApiDnsAAAARecordAllResponse, error) {
	rsp, err := c.GetApiDnsAAAARecordAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsAAAARecordAllResponse(rsp)
}

// GetApiDnsAAAARecordHostNameDNSHostNameWithResponse request returning *GetApiDnsAAAARecordHostNameDNSHostNameResponse
func (c *ClientWithResponses) GetApiDnsAAAARecordHostNameDNSHostNameWithResponse(ctx context.Context, dNSHostName string, params *GetApiDnsAAAARecordHostNameDNSHostNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsAAAARecordHostNameDNSHostNameResponse, error) {
	rsp, err := c.GetApiDnsAAAARecordHostNameDNSHostName(ctx, dNSHostName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsAAAARecordHostNameDNSHostNameResponse(rsp)
}

// GetApiDnsAAAARecordIPv6AddressIPv6AddressWithResponse request returning *GetApiDnsAAAARecordIPv6AddressIPv6AddressResponse
func (c *ClientWithResponses) GetApiDnsAAAARecordIPv6AddressIPv6AddressWithResponse(ctx context.Context, iPv6Address string, params *GetApiDnsAAAARecordIPv6AddressIPv6AddressParams, reqEditors ...RequestEditorFn) (*GetApiDnsAAAARecordIPv6AddressIPv6AddressResponse, error) {
	rsp, err := c.GetApiDnsAAAARecordIPv6AddressIPv6Address(ctx, iPv6Address, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsAAAARecordIPv6AddressIPv6AddressResponse(rsp)
}

// GetApiDnsAAAARecordZoneNameWithResponse request returning *GetApiDnsAAAARecordZoneNameResponse
func (c *ClientWithResponses) GetApiDnsAAAARecordZoneNameWithResponse(ctx context.Context, zoneName string, params *GetApiDnsAAAARecordZoneNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsAAAARecordZoneNameResponse, error) {
	rsp, err := c.GetApiDnsAAAARecordZoneName(ctx, zoneName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsAAAARecordZoneNameResponse(rsp)
}

// DeleteApiDnsARecordWithResponse request returning *DeleteApiDnsARecordResponse
func (c *ClientWithResponses) DeleteApiDnsARecordWithResponse(ctx context.Context, params *DeleteApiDnsARecordParams, reqEditors ...RequestEditorFn) (*DeleteApiDnsARecordResponse, error) {
	rsp, err := c.DeleteApiDnsARecord(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiDnsARecordResponse(rsp)
}

// GetApiDnsARecordWithResponse request returning *GetApiDnsARecordResponse
func (c *ClientWithResponses) GetApiDnsARecordWithResponse(ctx context.Context, params *GetApiDnsARecordParams, reqEditors ...RequestEditorFn) (*GetApiDnsARecordResponse, error) {
	rsp, err := c.GetApiDnsARecord(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsARecordResponse(rsp)
}

// PostApiDnsARecordWithResponse request returning *PostApiDnsARecordResponse
func (c *ClientWithResponses) PostApiDnsARecordWithResponse(ctx context.Context, params *PostApiDnsARecordParams, reqEditors ...RequestEditorFn) (*PostApiDnsARecordResponse, error) {
	rsp, err := c.PostApiDnsARecord(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDnsARecordResponse(rsp)
}

// GetApiDnsARecordAllWithResponse request returning *GetApiDnsARecordAllResponse
func (c *ClientWithResponses) GetApiDnsARecordAllWithResponse(ctx context.Context, params *GetApiDnsARecordAllParams, reqEditors ...RequestEditorFn) (*GetApiDnsARecordAllResponse, error) {
	rsp, err := c.GetApiDnsARecordAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsARecordAllResponse(rsp)
}

// GetApiDnsARecordHostNameDNSHostNameWithResponse request returning *GetApiDnsARecordHostNameDNSHostNameResponse
func (c *ClientWithResponses) GetApiDnsARecordHostNameDNSHostNameWithResponse(ctx context.Context, dNSHostName string, params *GetApiDnsARecordHostNameDNSHostNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsARecordHostNameDNSHostNameResponse, error) {
	rsp, err := c.GetApiDnsARecordHostNameDNSHostName(ctx, dNSHostName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsARecordHostNameDNSHostNameResponse(rsp)
}

// GetApiDnsARecordIPAddressIPAddressWithResponse request returning *GetApiDnsARecordIPAddressIPAddressResponse
func (c *ClientWithResponses) GetApiDnsARecordIPAddressIPAddressWithResponse(ctx context.Context, iPAddress string, params *GetApiDnsARecordIPAddressIPAddressParams, reqEditors ...RequestEditorFn) (*GetApiDnsARecordIPAddressIPAddressResponse, error) {
	rsp, err := c.GetApiDnsARecordIPAddressIPAddress(ctx, iPAddress, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsARecordIPAddressIPAddressResponse(rsp)
}

// GetApiDnsARecordZoneNameWithResponse request returning *GetApiDnsARecordZoneNameResponse
func (c *ClientWithResponses) GetApiDnsARecordZoneNameWithResponse(ctx context.Context, zoneName string, params *GetApiDnsARecordZoneNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsARecordZoneNameResponse, error) {
	rsp, err := c.GetApiDnsARecordZoneName(ctx, zoneName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsARecordZoneNameResponse(rsp)
}

// DeleteApiDnsCNameRecordWithResponse request returning *DeleteApiDnsCNameRecordResponse
func (c *ClientWithResponses) DeleteApiDnsCNameRecordWithResponse(ctx context.Context, params *DeleteApiDnsCNameRecordParams, reqEditors ...RequestEditorFn) (*DeleteApiDnsCNameRecordResponse, error) {
	rsp, err := c.DeleteApiDnsCNameRecord(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiDnsCNameRecordResponse(rsp)
}

// GetApiDnsCNameRecordWithResponse request returning *GetApiDnsCNameRecordResponse
func (c *ClientWithResponses) GetApiDnsCNameRecordWithResponse(ctx context.Context, params *GetApiDnsCNameRecordParams, reqEditors ...RequestEditorFn) (*GetApiDnsCNameRecordResponse, error) {
	rsp, err := c.GetApiDnsCNameRecord(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsCNameRecordResponse(rsp)
}

// PostApiDnsCNameRecordWithResponse request returning *PostApiDnsCNameRecordResponse
func (c *ClientWithResponses) PostApiDnsCNameRecordWithResponse(ctx context.Context, params *PostApiDnsCNameRecordParams, reqEditors ...RequestEditorFn) (*PostApiDnsCNameRecordResponse, error) {
	rsp, err := c.PostApiDnsCNameRecord(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDnsCNameRecordResponse(rsp)
}

// GetApiDnsCNameRecordAllWithResponse request returning *GetApiDnsCNameRecordAllResponse
func (c *ClientWithResponses) GetApiDnsCNameRecordAllWithResponse(ctx context.Context, params *GetApiDnsCNameRecordAllParams, reqEditors ...RequestEditorFn) (*GetApiDnsCNameRecordAllResponse, error) {
	rsp, err := c.GetApiDnsCNameRecordAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsCNameRecordAllResponse(rsp)
}

// GetApiDnsCNameRecordHostNameDNSHostNameWithResponse request returning *GetApiDnsCNameRecordHostNameDNSHostNameResponse
func (c *ClientWithResponses) GetApiDnsCNameRecordHostNameDNSHostNameWithResponse(ctx context.Context, dNSHostName string, params *GetApiDnsCNameRecordHostNameDNSHostNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsCNameRecordHostNameDNSHostNameResponse, error) {
	rsp, err := c.GetApiDnsCNameRecordHostNameDNSHostName(ctx, dNSHostName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsCNameRecordHostNameDNSHostNameResponse(rsp)
}

// GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasWithResponse request returning *GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasResponse
func (c *ClientWithResponses) GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasWithResponse(ctx context.Context, dNSHostNameAlias string, params *GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasParams, reqEditors ...RequestEditorFn) (*GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasResponse, error) {
	rsp, err := c.GetApiDnsCNameRecordHostNameAliasDNSHostNameAlias(ctx, dNSHostNameAlias, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsCNameRecordHostNameAliasDNSHostNameAliasResponse(rsp)
}

// GetApiDnsCNameRecordZoneNameWithResponse request returning *GetApiDnsCNameRecordZoneNameResponse
func (c *ClientWithResponses) GetApiDnsCNameRecordZoneNameWithResponse(ctx context.Context, zoneName string, params *GetApiDnsCNameRecordZoneNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsCNameRecordZoneNameResponse, error) {
	rsp, err := c.GetApiDnsCNameRecordZoneName(ctx, zoneName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsCNameRecordZoneNameResponse(rsp)
}

// GetApiDnsLookupZoneAllWithResponse request returning *GetApiDnsLookupZoneAllResponse
func (c *ClientWithResponses) GetApiDnsLookupZoneAllWithResponse(ctx context.Context, params *GetApiDnsLookupZoneAllParams, reqEditors ...RequestEditorFn) (*GetApiDnsLookupZoneAllResponse, error) {
	rsp, err := c.GetApiDnsLookupZoneAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsLookupZoneAllResponse(rsp)
}

// DeleteApiDnsLookupZoneZoneNameWithResponse request returning *DeleteApiDnsLookupZoneZoneNameResponse
func (c *ClientWithResponses) DeleteApiDnsLookupZoneZoneNameWithResponse(ctx context.Context, zoneName string, params *DeleteApiDnsLookupZoneZoneNameParams, reqEditors ...RequestEditorFn) (*DeleteApiDnsLookupZoneZoneNameResponse, error) {
	rsp, err := c.DeleteApiDnsLookupZoneZoneName(ctx, zoneName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiDnsLookupZoneZoneNameResponse(rsp)
}

// PostApiDnsLookupZoneZoneNameWithResponse request returning *PostApiDnsLookupZoneZoneNameResponse
func (c *ClientWithResponses) PostApiDnsLookupZoneZoneNameWithResponse(ctx context.Context, zoneName string, params *PostApiDnsLookupZoneZoneNameParams, reqEditors ...RequestEditorFn) (*PostApiDnsLookupZoneZoneNameResponse, error) {
	rsp, err := c.PostApiDnsLookupZoneZoneName(ctx, zoneName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDnsLookupZoneZoneNameResponse(rsp)
}

// GetApiDnsReverseLookupZoneAllWithResponse request returning *GetApiDnsReverseLookupZoneAllResponse
func (c *ClientWithResponses) GetApiDnsReverseLookupZoneAllWithResponse(ctx context.Context, params *GetApiDnsReverseLookupZoneAllParams, reqEditors ...RequestEditorFn) (*GetApiDnsReverseLookupZoneAllResponse, error) {
	rsp, err := c.GetApiDnsReverseLookupZoneAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsReverseLookupZoneAllResponse(rsp)
}

// DeleteApiDnsReverseLookupZoneNetworkIDWithResponse request returning *DeleteApiDnsReverseLookupZoneNetworkIDResponse
func (c *ClientWithResponses) DeleteApiDnsReverseLookupZoneNetworkIDWithResponse(ctx context.Context, networkID string, params *DeleteApiDnsReverseLookupZoneNetworkIDParams, reqEditors ...RequestEditorFn) (*DeleteApiDnsReverseLookupZoneNetworkIDResponse, error) {
	rsp, err := c.DeleteApiDnsReverseLookupZoneNetworkID(ctx, networkID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiDnsReverseLookupZoneNetworkIDResponse(rsp)
}

// GetApiDnsReverseLookupZoneNetworkIDWithResponse request returning *GetApiDnsReverseLookupZoneNetworkIDResponse
func (c *ClientWithResponses) GetApiDnsReverseLookupZoneNetworkIDWithResponse(ctx context.Context, networkID string, params *GetApiDnsReverseLookupZoneNetworkIDParams, reqEditors ...RequestEditorFn) (*GetApiDnsReverseLookupZoneNetworkIDResponse, error) {
	rsp, err := c.GetApiDnsReverseLookupZoneNetworkID(ctx, networkID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsReverseLookupZoneNetworkIDResponse(rsp)
}

// PostApiDnsReverseLookupZoneNetworkIDWithResponse request returning *PostApiDnsReverseLookupZoneNetworkIDResponse
func (c *ClientWithResponses) PostApiDnsReverseLookupZoneNetworkIDWithResponse(ctx context.Context, networkID string, params *PostApiDnsReverseLookupZoneNetworkIDParams, reqEditors ...RequestEditorFn) (*PostApiDnsReverseLookupZoneNetworkIDResponse, error) {
	rsp, err := c.PostApiDnsReverseLookupZoneNetworkID(ctx, networkID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDnsReverseLookupZoneNetworkIDResponse(rsp)
}

// GetApiDnsZonesAllWithResponse request returning *GetApiDnsZonesAllResponse
func (c *ClientWithResponses) GetApiDnsZonesAllWithResponse(ctx context.Context, params *GetApiDnsZonesAllParams, reqEditors ...RequestEditorFn) (*GetApiDnsZonesAllResponse, error) {
	rsp, err := c.GetApiDnsZonesAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsZonesAllResponse(rsp)
}

// GetApiDnsZonesZoneNameWithResponse request returning *GetApiDnsZonesZoneNameResponse
func (c *ClientWithResponses) GetApiDnsZonesZoneNameWithResponse(ctx context.Context, zoneName string, params *GetApiDnsZonesZoneNameParams, reqEditors ...RequestEditorFn) (*GetApiDnsZonesZoneNameResponse, error) {
	rsp, err := c.GetApiDnsZonesZoneName(ctx, zoneName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsZonesZoneNameResponse(rsp)
}

// GetApiDnsZonesZoneNameExistsWithResponse request returning *GetApiDnsZonesZoneNameExistsResponse
func (c *ClientWithResponses) GetApiDnsZonesZoneNameExistsWithResponse(ctx context.Context, zoneName string, params *GetApiDnsZonesZoneNameExistsParams, reqEditors ...RequestEditorFn) (*GetApiDnsZonesZoneNameExistsResponse, error) {
	rsp, err := c.GetApiDnsZonesZoneNameExists(ctx, zoneName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsZonesZoneNameExistsResponse(rsp)
}

// PostApiLoginWithResponse request returning *PostApiLoginResponse
func (c *ClientWithResponses) PostApiLoginWithResponse(ctx context.Context, params *PostApiLoginParams, reqEditors ...RequestEditorFn) (*PostApiLoginResponse, error) {
	rsp, err := c.PostApiLogin(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiLoginResponse(rsp)
}

// PostApiOUWithResponse request returning *PostApiOUResponse
func (c *ClientWithResponses) PostApiOUWithResponse(ctx context.Context, params *PostApiOUParams, reqEditors ...RequestEditorFn) (*PostApiOUResponse, error) {
	rsp, err := c.PostApiOU(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiOUResponse(rsp)
}

// PutApiOUWithResponse request returning *PutApiOUResponse
func (c *ClientWithResponses) PutApiOUWithResponse(ctx context.Context, params *PutApiOUParams, reqEditors ...RequestEditorFn) (*PutApiOUResponse, error) {
	rsp, err := c.PutApiOU(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiOUResponse(rsp)
}

// GetApiOUAllWithResponse request returning *GetApiOUAllResponse
func (c *ClientWithResponses) GetApiOUAllWithResponse(ctx context.Context, params *GetApiOUAllParams, reqEditors ...RequestEditorFn) (*GetApiOUAllResponse, error) {
	rsp, err := c.GetApiOUAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiOUAllResponse(rsp)
}

// GetOUByGuidWithResponse request returning *GetOUByGuidResponse
func (c *ClientWithResponses) GetOUByGuidWithResponse(ctx context.Context, params *GetOUByGuidParams, reqEditors ...RequestEditorFn) (*GetOUByGuidResponse, error) {
	rsp, err := c.GetOUByGuid(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOUByGuidResponse(rsp)
}

// PutApiOUMoveWithResponse request returning *PutApiOUMoveResponse
func (c *ClientWithResponses) PutApiOUMoveWithResponse(ctx context.Context, params *PutApiOUMoveParams, reqEditors ...RequestEditorFn) (*PutApiOUMoveResponse, error) {
	rsp, err := c.PutApiOUMove(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiOUMoveResponse(rsp)
}

// GetOUByPathWithResponse request returning *GetOUByPathResponse
func (c *ClientWithResponses) GetOUByPathWithResponse(ctx context.Context, params *GetOUByPathParams, reqEditors ...RequestEditorFn) (*GetOUByPathResponse, error) {
	rsp, err := c.GetOUByPath(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOUByPathResponse(rsp)
}

// GetApiOUPathExistsWithResponse request returning *GetApiOUPathExistsResponse
func (c *ClientWithResponses) GetApiOUPathExistsWithResponse(ctx context.Context, params *GetApiOUPathExistsParams, reqEditors ...RequestEditorFn) (*GetApiOUPathExistsResponse, error) {
	rsp, err := c.GetApiOUPathExists(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiOUPathExistsResponse(rsp)
}

// DeleteApiOUPathRemoveWithResponse request returning *DeleteApiOUPathRemoveResponse
func (c *ClientWithResponses) DeleteApiOUPathRemoveWithResponse(ctx context.Context, params *DeleteApiOUPathRemoveParams, reqEditors ...RequestEditorFn) (*DeleteApiOUPathRemoveResponse, error) {
	rsp, err := c.DeleteApiOUPathRemove(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiOUPathRemoveResponse(rsp)
}

// PutApiOURenameWithResponse request returning *PutApiOURenameResponse
func (c *ClientWithResponses) PutApiOURenameWithResponse(ctx context.Context, params *PutApiOURenameParams, reqEditors ...RequestEditorFn) (*PutApiOURenameResponse, error) {
	rsp, err := c.PutApiOURename(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiOURenameResponse(rsp)
}

// ParseGetApiADGroupsResponse parses an HTTP response from a GetApiADGroupsWithResponse call
func ParseGetApiADGroupsResponse(rsp *http.Response) (*GetApiADGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADGroupsAllResponse parses an HTTP response from a GetApiADGroupsAllWithResponse call
func ParseGetApiADGroupsAllResponse(rsp *http.Response) (*GetApiADGroupsAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADGroupsAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADGroupsDistributionAllResponse parses an HTTP response from a GetApiADGroupsDistributionAllWithResponse call
func ParseGetApiADGroupsDistributionAllResponse(rsp *http.Response) (*GetApiADGroupsDistributionAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADGroupsDistributionAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADGroupsSecurityAllResponse parses an HTTP response from a GetApiADGroupsSecurityAllWithResponse call
func ParseGetApiADGroupsSecurityAllResponse(rsp *http.Response) (*GetApiADGroupsSecurityAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADGroupsSecurityAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADGroupsGroupNameResponse parses an HTTP response from a GetApiADGroupsGroupNameWithResponse call
func ParseGetApiADGroupsGroupNameResponse(rsp *http.Response) (*GetApiADGroupsGroupNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADGroupsGroupNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiADGroupsGroupNameDistributionResponse parses an HTTP response from a PostApiADGroupsGroupNameDistributionWithResponse call
func ParsePostApiADGroupsGroupNameDistributionResponse(rsp *http.Response) (*PostApiADGroupsGroupNameDistributionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiADGroupsGroupNameDistributionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADGroupsGroupNameExistsResponse parses an HTTP response from a GetApiADGroupsGroupNameExistsWithResponse call
func ParseGetApiADGroupsGroupNameExistsResponse(rsp *http.Response) (*GetApiADGroupsGroupNameExistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADGroupsGroupNameExistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BooleanResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiADGroupsGroupNameRemoveResponse parses an HTTP response from a DeleteApiADGroupsGroupNameRemoveWithResponse call
func ParseDeleteApiADGroupsGroupNameRemoveResponse(rsp *http.Response) (*DeleteApiADGroupsGroupNameRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiADGroupsGroupNameRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiADGroupsGroupNameRenameNewGroupNameResponse parses an HTTP response from a PutApiADGroupsGroupNameRenameNewGroupNameWithResponse call
func ParsePutApiADGroupsGroupNameRenameNewGroupNameResponse(rsp *http.Response) (*PutApiADGroupsGroupNameRenameNewGroupNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiADGroupsGroupNameRenameNewGroupNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiADGroupsGroupNameSecurityResponse parses an HTTP response from a PostApiADGroupsGroupNameSecurityWithResponse call
func ParsePostApiADGroupsGroupNameSecurityResponse(rsp *http.Response) (*PostApiADGroupsGroupNameSecurityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiADGroupsGroupNameSecurityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADUserListUsersResponse parses an HTTP response from a GetApiADUserListUsersWithResponse call
func ParseGetApiADUserListUsersResponse(rsp *http.Response) (*GetApiADUserListUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADUserListUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADUserListUsersAllResponse parses an HTTP response from a GetApiADUserListUsersAllWithResponse call
func ParseGetApiADUserListUsersAllResponse(rsp *http.Response) (*GetApiADUserListUsersAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADUserListUsersAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiADUserUsernameResponse parses an HTTP response from a DeleteApiADUserUsernameWithResponse call
func ParseDeleteApiADUserUsernameResponse(rsp *http.Response) (*DeleteApiADUserUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiADUserUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseAPIUserResponse parses an HTTP response from a APIUserWithResponse call
func ParseAPIUserResponse(rsp *http.Response) (*APIUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &APIUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiADUserUsernameResponse parses an HTTP response from a PutApiADUserUsernameWithResponse call
func ParsePutApiADUserUsernameResponse(rsp *http.Response) (*PutApiADUserUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiADUserUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADUserUsernameDetailsResponse parses an HTTP response from a GetApiADUserUsernameDetailsWithResponse call
func ParseGetApiADUserUsernameDetailsResponse(rsp *http.Response) (*GetApiADUserUsernameDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADUserUsernameDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiADUserUsernameDisableResponse parses an HTTP response from a PutApiADUserUsernameDisableWithResponse call
func ParsePutApiADUserUsernameDisableResponse(rsp *http.Response) (*PutApiADUserUsernameDisableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiADUserUsernameDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiADUserUsernameEnableResponse parses an HTTP response from a PutApiADUserUsernameEnableWithResponse call
func ParsePutApiADUserUsernameEnableResponse(rsp *http.Response) (*PutApiADUserUsernameEnableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiADUserUsernameEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADUserUsernameExistsResponse parses an HTTP response from a GetApiADUserUsernameExistsWithResponse call
func ParseGetApiADUserUsernameExistsResponse(rsp *http.Response) (*GetApiADUserUsernameExistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADUserUsernameExistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BooleanResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADUserUsernameGroupAllResponse parses an HTTP response from a GetApiADUserUsernameGroupAllWithResponse call
func ParseGetApiADUserUsernameGroupAllResponse(rsp *http.Response) (*GetApiADUserUsernameGroupAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADUserUsernameGroupAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiADUserUsernameGroupGroupNameResponse parses an HTTP response from a DeleteApiADUserUsernameGroupGroupNameWithResponse call
func ParseDeleteApiADUserUsernameGroupGroupNameResponse(rsp *http.Response) (*DeleteApiADUserUsernameGroupGroupNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiADUserUsernameGroupGroupNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADUserUsernameGroupGroupNameResponse parses an HTTP response from a GetApiADUserUsernameGroupGroupNameWithResponse call
func ParseGetApiADUserUsernameGroupGroupNameResponse(rsp *http.Response) (*GetApiADUserUsernameGroupGroupNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADUserUsernameGroupGroupNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiADUserUsernameGroupGroupNameResponse parses an HTTP response from a PostApiADUserUsernameGroupGroupNameWithResponse call
func ParsePostApiADUserUsernameGroupGroupNameResponse(rsp *http.Response) (*PostApiADUserUsernameGroupGroupNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiADUserUsernameGroupGroupNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADUserUsernameGroupGroupNameExistsResponse parses an HTTP response from a GetApiADUserUsernameGroupGroupNameExistsWithResponse call
func ParseGetApiADUserUsernameGroupGroupNameExistsResponse(rsp *http.Response) (*GetApiADUserUsernameGroupGroupNameExistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADUserUsernameGroupGroupNameExistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BooleanResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADUserUsernameLastLogonResponse parses an HTTP response from a GetApiADUserUsernameLastLogonWithResponse call
func ParseGetApiADUserUsernameLastLogonResponse(rsp *http.Response) (*GetApiADUserUsernameLastLogonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADUserUsernameLastLogonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DateTimeResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiADUserUsernameRenameNewUsernameResponse parses an HTTP response from a PutApiADUserUsernameRenameNewUsernameWithResponse call
func ParsePutApiADUserUsernameRenameNewUsernameResponse(rsp *http.Response) (*PutApiADUserUsernameRenameNewUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiADUserUsernameRenameNewUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiADUserUsernameResetPasswordResponse parses an HTTP response from a PutApiADUserUsernameResetPasswordWithResponse call
func ParsePutApiADUserUsernameResetPasswordResponse(rsp *http.Response) (*PutApiADUserUsernameResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiADUserUsernameResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiADUserUsernameUnlockResponse parses an HTTP response from a PutApiADUserUsernameUnlockWithResponse call
func ParsePutApiADUserUsernameUnlockResponse(rsp *http.Response) (*PutApiADUserUsernameUnlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiADUserUsernameUnlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiADUserGuidResponse parses an HTTP response from a DeleteApiADUserGuidWithResponse call
func ParseDeleteApiADUserGuidResponse(rsp *http.Response) (*DeleteApiADUserGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiADUserGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiADUserGuidResponse parses an HTTP response from a GetApiADUserGuidWithResponse call
func ParseGetApiADUserGuidResponse(rsp *http.Response) (*GetApiADUserGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiADUserGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiADUserGuidResponse parses an HTTP response from a PutApiADUserGuidWithResponse call
func ParsePutApiADUserGuidResponse(rsp *http.Response) (*PutApiADUserGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiADUserGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiComputersResponse parses an HTTP response from a GetApiComputersWithResponse call
func ParseGetApiComputersResponse(rsp *http.Response) (*GetApiComputersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiComputersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiComputersAllResponse parses an HTTP response from a GetApiComputersAllWithResponse call
func ParseGetApiComputersAllResponse(rsp *http.Response) (*GetApiComputersAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiComputersAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiComputersCleanUpResponse parses an HTTP response from a DeleteApiComputersCleanUpWithResponse call
func ParseDeleteApiComputersCleanUpResponse(rsp *http.Response) (*DeleteApiComputersCleanUpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiComputersCleanUpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiComputersRemoveResponse parses an HTTP response from a DeleteApiComputersRemoveWithResponse call
func ParseDeleteApiComputersRemoveResponse(rsp *http.Response) (*DeleteApiComputersRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiComputersRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiComputersADComputerNameResponse parses an HTTP response from a GetApiComputersADComputerNameWithResponse call
func ParseGetApiComputersADComputerNameResponse(rsp *http.Response) (*GetApiComputersADComputerNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiComputersADComputerNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiComputersADComputerNameExistsResponse parses an HTTP response from a GetApiComputersADComputerNameExistsWithResponse call
func ParseGetApiComputersADComputerNameExistsResponse(rsp *http.Response) (*GetApiComputersADComputerNameExistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiComputersADComputerNameExistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BooleanResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiComputersADComputerNameRegisterResponse parses an HTTP response from a PostApiComputersADComputerNameRegisterWithResponse call
func ParsePostApiComputersADComputerNameRegisterResponse(rsp *http.Response) (*PostApiComputersADComputerNameRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiComputersADComputerNameRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiComputersADComputerNameRemoveResponse parses an HTTP response from a DeleteApiComputersADComputerNameRemoveWithResponse call
func ParseDeleteApiComputersADComputerNameRemoveResponse(rsp *http.Response) (*DeleteApiComputersADComputerNameRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiComputersADComputerNameRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiComputersADComputerNameRenameNewADComputerNameResponse parses an HTTP response from a PutApiComputersADComputerNameRenameNewADComputerNameWithResponse call
func ParsePutApiComputersADComputerNameRenameNewADComputerNameResponse(rsp *http.Response) (*PutApiComputersADComputerNameRenameNewADComputerNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiComputersADComputerNameRenameNewADComputerNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiComputersADComputerNameUpdateResponse parses an HTTP response from a PutApiComputersADComputerNameUpdateWithResponse call
func ParsePutApiComputersADComputerNameUpdateResponse(rsp *http.Response) (*PutApiComputersADComputerNameUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiComputersADComputerNameUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiDnsAAAARecordResponse parses an HTTP response from a DeleteApiDnsAAAARecordWithResponse call
func ParseDeleteApiDnsAAAARecordResponse(rsp *http.Response) (*DeleteApiDnsAAAARecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiDnsAAAARecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsAAAARecordResponse parses an HTTP response from a GetApiDnsAAAARecordWithResponse call
func ParseGetApiDnsAAAARecordResponse(rsp *http.Response) (*GetApiDnsAAAARecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsAAAARecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiDnsAAAARecordResponse parses an HTTP response from a PostApiDnsAAAARecordWithResponse call
func ParsePostApiDnsAAAARecordResponse(rsp *http.Response) (*PostApiDnsAAAARecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiDnsAAAARecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsAAAARecordAllResponse parses an HTTP response from a GetApiDnsAAAARecordAllWithResponse call
func ParseGetApiDnsAAAARecordAllResponse(rsp *http.Response) (*GetApiDnsAAAARecordAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsAAAARecordAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsAAAARecordHostNameDNSHostNameResponse parses an HTTP response from a GetApiDnsAAAARecordHostNameDNSHostNameWithResponse call
func ParseGetApiDnsAAAARecordHostNameDNSHostNameResponse(rsp *http.Response) (*GetApiDnsAAAARecordHostNameDNSHostNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsAAAARecordHostNameDNSHostNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsAAAARecordIPv6AddressIPv6AddressResponse parses an HTTP response from a GetApiDnsAAAARecordIPv6AddressIPv6AddressWithResponse call
func ParseGetApiDnsAAAARecordIPv6AddressIPv6AddressResponse(rsp *http.Response) (*GetApiDnsAAAARecordIPv6AddressIPv6AddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsAAAARecordIPv6AddressIPv6AddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsAAAARecordZoneNameResponse parses an HTTP response from a GetApiDnsAAAARecordZoneNameWithResponse call
func ParseGetApiDnsAAAARecordZoneNameResponse(rsp *http.Response) (*GetApiDnsAAAARecordZoneNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsAAAARecordZoneNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiDnsARecordResponse parses an HTTP response from a DeleteApiDnsARecordWithResponse call
func ParseDeleteApiDnsARecordResponse(rsp *http.Response) (*DeleteApiDnsARecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiDnsARecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsARecordResponse parses an HTTP response from a GetApiDnsARecordWithResponse call
func ParseGetApiDnsARecordResponse(rsp *http.Response) (*GetApiDnsARecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsARecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiDnsARecordResponse parses an HTTP response from a PostApiDnsARecordWithResponse call
func ParsePostApiDnsARecordResponse(rsp *http.Response) (*PostApiDnsARecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiDnsARecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsARecordAllResponse parses an HTTP response from a GetApiDnsARecordAllWithResponse call
func ParseGetApiDnsARecordAllResponse(rsp *http.Response) (*GetApiDnsARecordAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsARecordAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsARecordHostNameDNSHostNameResponse parses an HTTP response from a GetApiDnsARecordHostNameDNSHostNameWithResponse call
func ParseGetApiDnsARecordHostNameDNSHostNameResponse(rsp *http.Response) (*GetApiDnsARecordHostNameDNSHostNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsARecordHostNameDNSHostNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsARecordIPAddressIPAddressResponse parses an HTTP response from a GetApiDnsARecordIPAddressIPAddressWithResponse call
func ParseGetApiDnsARecordIPAddressIPAddressResponse(rsp *http.Response) (*GetApiDnsARecordIPAddressIPAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsARecordIPAddressIPAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsARecordZoneNameResponse parses an HTTP response from a GetApiDnsARecordZoneNameWithResponse call
func ParseGetApiDnsARecordZoneNameResponse(rsp *http.Response) (*GetApiDnsARecordZoneNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsARecordZoneNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiDnsCNameRecordResponse parses an HTTP response from a DeleteApiDnsCNameRecordWithResponse call
func ParseDeleteApiDnsCNameRecordResponse(rsp *http.Response) (*DeleteApiDnsCNameRecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiDnsCNameRecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsCNameRecordResponse parses an HTTP response from a GetApiDnsCNameRecordWithResponse call
func ParseGetApiDnsCNameRecordResponse(rsp *http.Response) (*GetApiDnsCNameRecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsCNameRecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiDnsCNameRecordResponse parses an HTTP response from a PostApiDnsCNameRecordWithResponse call
func ParsePostApiDnsCNameRecordResponse(rsp *http.Response) (*PostApiDnsCNameRecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiDnsCNameRecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsCNameRecordAllResponse parses an HTTP response from a GetApiDnsCNameRecordAllWithResponse call
func ParseGetApiDnsCNameRecordAllResponse(rsp *http.Response) (*GetApiDnsCNameRecordAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsCNameRecordAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsCNameRecordHostNameDNSHostNameResponse parses an HTTP response from a GetApiDnsCNameRecordHostNameDNSHostNameWithResponse call
func ParseGetApiDnsCNameRecordHostNameDNSHostNameResponse(rsp *http.Response) (*GetApiDnsCNameRecordHostNameDNSHostNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsCNameRecordHostNameDNSHostNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsCNameRecordHostNameAliasDNSHostNameAliasResponse parses an HTTP response from a GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasWithResponse call
func ParseGetApiDnsCNameRecordHostNameAliasDNSHostNameAliasResponse(rsp *http.Response) (*GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsCNameRecordHostNameAliasDNSHostNameAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsCNameRecordZoneNameResponse parses an HTTP response from a GetApiDnsCNameRecordZoneNameWithResponse call
func ParseGetApiDnsCNameRecordZoneNameResponse(rsp *http.Response) (*GetApiDnsCNameRecordZoneNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsCNameRecordZoneNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsRecordListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsLookupZoneAllResponse parses an HTTP response from a GetApiDnsLookupZoneAllWithResponse call
func ParseGetApiDnsLookupZoneAllResponse(rsp *http.Response) (*GetApiDnsLookupZoneAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsLookupZoneAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsZoneListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiDnsLookupZoneZoneNameResponse parses an HTTP response from a DeleteApiDnsLookupZoneZoneNameWithResponse call
func ParseDeleteApiDnsLookupZoneZoneNameResponse(rsp *http.Response) (*DeleteApiDnsLookupZoneZoneNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiDnsLookupZoneZoneNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsZoneResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiDnsLookupZoneZoneNameResponse parses an HTTP response from a PostApiDnsLookupZoneZoneNameWithResponse call
func ParsePostApiDnsLookupZoneZoneNameResponse(rsp *http.Response) (*PostApiDnsLookupZoneZoneNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiDnsLookupZoneZoneNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsZoneResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsReverseLookupZoneAllResponse parses an HTTP response from a GetApiDnsReverseLookupZoneAllWithResponse call
func ParseGetApiDnsReverseLookupZoneAllResponse(rsp *http.Response) (*GetApiDnsReverseLookupZoneAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsReverseLookupZoneAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsZoneListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiDnsReverseLookupZoneNetworkIDResponse parses an HTTP response from a DeleteApiDnsReverseLookupZoneNetworkIDWithResponse call
func ParseDeleteApiDnsReverseLookupZoneNetworkIDResponse(rsp *http.Response) (*DeleteApiDnsReverseLookupZoneNetworkIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiDnsReverseLookupZoneNetworkIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsZoneResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsReverseLookupZoneNetworkIDResponse parses an HTTP response from a GetApiDnsReverseLookupZoneNetworkIDWithResponse call
func ParseGetApiDnsReverseLookupZoneNetworkIDResponse(rsp *http.Response) (*GetApiDnsReverseLookupZoneNetworkIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsReverseLookupZoneNetworkIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsZoneResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiDnsReverseLookupZoneNetworkIDResponse parses an HTTP response from a PostApiDnsReverseLookupZoneNetworkIDWithResponse call
func ParsePostApiDnsReverseLookupZoneNetworkIDResponse(rsp *http.Response) (*PostApiDnsReverseLookupZoneNetworkIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiDnsReverseLookupZoneNetworkIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsZoneResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsZonesAllResponse parses an HTTP response from a GetApiDnsZonesAllWithResponse call
func ParseGetApiDnsZonesAllResponse(rsp *http.Response) (*GetApiDnsZonesAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsZonesAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsZoneListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsZonesZoneNameResponse parses an HTTP response from a GetApiDnsZonesZoneNameWithResponse call
func ParseGetApiDnsZonesZoneNameResponse(rsp *http.Response) (*GetApiDnsZonesZoneNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsZonesZoneNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsZoneResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiDnsZonesZoneNameExistsResponse parses an HTTP response from a GetApiDnsZonesZoneNameExistsWithResponse call
func ParseGetApiDnsZonesZoneNameExistsResponse(rsp *http.Response) (*GetApiDnsZonesZoneNameExistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsZonesZoneNameExistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BooleanResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiLoginResponse parses an HTTP response from a PostApiLoginWithResponse call
func ParsePostApiLoginResponse(rsp *http.Response) (*PostApiLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StringResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiOUResponse parses an HTTP response from a PostApiOUWithResponse call
func ParsePostApiOUResponse(rsp *http.Response) (*PostApiOUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiOUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OUResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiOUResponse parses an HTTP response from a PutApiOUWithResponse call
func ParsePutApiOUResponse(rsp *http.Response) (*PutApiOUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiOUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OUResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiOUAllResponse parses an HTTP response from a GetApiOUAllWithResponse call
func ParseGetApiOUAllResponse(rsp *http.Response) (*GetApiOUAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiOUAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OUListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOUByGuidResponse parses an HTTP response from a GetOUByGuidWithResponse call
func ParseGetOUByGuidResponse(rsp *http.Response) (*GetOUByGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOUByGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OUResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiOUMoveResponse parses an HTTP response from a PutApiOUMoveWithResponse call
func ParsePutApiOUMoveResponse(rsp *http.Response) (*PutApiOUMoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiOUMoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OUResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOUByPathResponse parses an HTTP response from a GetOUByPathWithResponse call
func ParseGetOUByPathResponse(rsp *http.Response) (*GetOUByPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOUByPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OUResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiOUPathExistsResponse parses an HTTP response from a GetApiOUPathExistsWithResponse call
func ParseGetApiOUPathExistsResponse(rsp *http.Response) (*GetApiOUPathExistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiOUPathExistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BooleanResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiOUPathRemoveResponse parses an HTTP response from a DeleteApiOUPathRemoveWithResponse call
func ParseDeleteApiOUPathRemoveResponse(rsp *http.Response) (*DeleteApiOUPathRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiOUPathRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OUResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutApiOURenameResponse parses an HTTP response from a PutApiOURenameWithResponse call
func ParsePutApiOURenameResponse(rsp *http.Response) (*PutApiOURenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiOURenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OUResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}
